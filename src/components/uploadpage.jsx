
import React from "react";
import { Component } from "react";
import { AppRegistry, TextInput } from "react";
import { Button, Popup, Segment, Accordion, Icon, Input, Divider, Search, Grid, Header, Dropdown, Form, Message, TextArea, FormButton } from "semantic-ui-react";
import { thisTypeAnnotation } from "@babel/types";
import _ from 'lodash'
import { now, timeThursdays } from "d3";

var temp1;
var CCT = 0;
var xCoord;
var yCoord;
var x;
var y;
var u;
var v;
var ukprimeArrayS;
var vkprimeArrayS;
var pchip;
var spd2Norm;
var EEcum;
var normalizer;
var normalizedArray;
var spdOrig;
var CRI;
var FSI;
var FSCI;
var xy;
var GAI;
var CRIArr;
var X;
var Y;
var Z;
var keyfeverArray = [];
var valuefeverArray = [];
var graphResponse;
var finalGraphValuesArrayQuick = [];

const applicationTypeOptions = [
  {
    key: 'A-Type',
    text: 'A-Type',
    value: 'A-Type'
  },
  {
    key: 'Decorative',
    text: 'Decorative',
    value: 'Decorative'
  },
  {
    key: 'Directional',
    text: 'Directional',
    value: 'Directional'
  },
  {
    key: 'Small Directional',
    text: 'Small Directional',
    value: 'Small Directional'
  },
  {
    key: 'Downlighting',
    text: 'Downlighting',
    value: 'Downlighting'
  },
  {
    key: 'Linear Fixture',
    text: 'Linear Fixture',
    value: 'Linear Fixture'
  },
  {
    key: 'Low/High Bay',
    text: 'Low/High Bay',
    value: 'Low/High Bay'
  },
  {
    key: 'Indoor other',
    text: 'Indoor other',
    value: 'Indoor other'
  },
  {
    key: 'Parking Lot',
    text: 'Parking Lot',
    value: 'Parking Lot'
  },
  {
    key: 'Parking Garage',
    text: 'Parking Garage',
    value: 'Parking Garage'
  },
  {
    key: 'Street/Roadway',
    text: 'Street/Roadway',
    value: 'Street/Roadway'
  },
  {
    key: 'Building Exterior',
    text: 'Building Exterior',
    value: 'Building Exterior'
  },
  {
    key: 'Outdoor Other',
    text: 'Outdoor Other',
    value: 'Outdoor Other'
  },
  {
    key: 'Connected',
    text: 'Connected',
    value: 'Connected'
  },

  {
    key: 'Spiral',
    text: 'Spiral',
    value: 'Sprial'
  },
  {
    key: 'Medical',
    text: 'Medical',
    value: 'Medical'
  }
]

const typeOptions = [
  {
    key: 'Lamp',
    text: 'Lamp',
    value: 'Lamp'
  },
  {
    key: 'Luminaire',
    text: 'Luminaire',
    value: 'Luminaire'
  },
  {
    key: 'Retrofit Kit',
    text: 'Retrofit Kit',
    value: 'Retrofit Kit'
  },
  {
    key: 'No Distinction',
    text: 'No Distinction',
    value: 'No Distinction'
  },
  {
    key: 'Other',
    text: 'Other',
    value: 'Other'
  }

]

const technologyOptions = [
  {
    key: 'Incandescent',
    text: 'Incandescent',
    value: 'Incandescent'
  },
  {
    key: 'LED',
    text: 'LED',
    value: 'LED'
  },
  {
    key: 'Fluorescent',
    text: 'Fluorescent',
    value: 'Fluorescent'
  },
  {
    key: 'Other',
    text: 'Other',
    value: 'Other'
  }
]
var repsonseLength = 0;
var newSpectraSearchId = 0;
export default class Uploadpage extends Component {
  state = { activeIndex: 0 }
  handleAccordianClick = (e, titleProps) => {
    const { index } = titleProps
    const { activeIndex } = this.state
    const newIndex = activeIndex === index ? -1 : index
    this.setState({ activeIndex: newIndex })
  }
  constructor(props) {
    super(props);
    this.state = { SpectraSearchID: '' }
    this.state = { Name: '' }
    this.state = { manufacturer: '' }
    this.state = { catalogNumber: '' }
    this.state = { description: '' }
    this.state = { docCreat: '' }
    this.state = { uniqueIdent: '' }
    this.state = { measureEquip: '' }
    this.state = { labratory: '' }
    this.state = { reportNum: '' }
    this.state = { reportData: '' }
    this.state = { comments: '' }
    this.state = { application: '' }
    this.state = { type: '' }
    this.state = { technology: '' }
    this.state = { formSubmitted: false }
    this.state = { sidArrayPlace: '' }
    this.state = { spectralDataState: [] }
    this.state = { errorOnSubmit: false }
    this.state = { hidden: false }
    this.state = { lumens: '' }
    this.state = { watts: '' }
    this.state = { volts: '' }
  }

  //need to make a fetch call to get the spectra search id of the last thing entered. length of things -1
  //then put that in a variable
  //so assign spectra search id the current id + 1 each time

  componentWillMount = () => {
    if (localStorage.getItem('thatUser') === undefined || localStorage.getItem('thatUser') === '' || this.props.user === '' || this.props.user === undefined) {
      //document.getElementById("middle-upload").classList.add("hidden");
      this.setState({ hidden: true });
      if (!localStorage.getItem('thatUser')) {

      }
      else {
        this.setState({ hidden: false });
      }
    }
    else {
      this.setState({ hidden: false });
    }
  }


  handle_id_assignment = (event) => {
    fetch('http://localhost:4000/lighting') // 10/1/2020 change '/lighting' to 'http://localhost:4000/lighting'
      .then(response => response.json())
      .then(_ = (response) => {
        if (Object.values(response)[0].length < 1) {
          this.setState({ SpectraSearchID: 1 })
        }
        else {
          this.setState({ lightingResponseCount: Object.values(response)[0].length - 1, sidArrayPlace: Object.values(response.data[0])[0] })
          repsonseLength = Object.values(response)[0].length - 1;
          var ssid = Object.values(response.data[repsonseLength])[0]
          newSpectraSearchId = ssid;
          newSpectraSearchId = newSpectraSearchId + 1
          this.setState({ SpectraSearchID: newSpectraSearchId });
        }
      })

  }

  //for the submission button
  handle_submit = (event) => {
    event.preventDefault();
    //if the required things arent there dont submit
    //need name sprectral data application type technology
    if (this.state.Name === undefined || this.state.spectralDataState === undefined || this.state.application === undefined || this.state.type === undefined || this.state.technology === undefined || this.state.lumens === undefined || this.state.volts === undefined || this.state.watts === undefined) { // 10/1/2020 add this.state.lumens === undefined || this.state.volts === undefined || this.state.watts === undefined to set those valuable as required
      this.setState({ errorOnSubmit: true });
      window.scrollTo(0, 0);
      return -1;
    }
    this.setState({ formSubmitted: true })
    // On submit of the form, send a POST request with the data to the server.
    fetch('http://localhost:4000/lighting', {
      method: 'POST',
      body: JSON.stringify({
        SpectraSearchID: this.state.SpectraSearchID,
        Name: this.state.Name,
        manufacturer: this.state.manufacturer,
        catalogNumber: this.state.catalogNumber,
        description: this.state.description,
        docCreat: this.state.docCreat,
        uniqueIdent: this.state.uniqueIdent,
        measureEquip: this.state.measureEquip,
        labratory: this.state.labratory,
        reportNum: this.state.reportNum,
        reportData: this.state.reportData,
        comments: this.state.comments,
        application: this.state.application,
        type: this.state.type,
        technology: this.state.technology,
      }),
      headers: { 'Content-Type': 'application/json' }
    })
      .then(function (response) {
        //this is the line that is giving me the error
        return response.json()
      }).then(function (body) {
        console.log(body);
      });
    //--------------------------------
    fetch('http://localhost:4000/SpectralData', {
      method: 'POST',
      body: JSON.stringify({
        SpectraSearchID: this.state.SpectraSearchID,
        specData: this.state.spectralDataState
      }),
      headers: { 'Content-Type': 'application/json' }
    })
      .then(function (response) {
        //this is the line that is giving me the error
        return response.json()
      }).then(function (body) {
        console.log(body);
      });








    //---------------------------------------------------------------------------------------------------------------------------

    /*-------------------------------------------------------------XYZ CIE Coordinates-------------------------------------------------------------*/

    const arrSum = arr => arr.reduce((a, b) => a + b, 0)

    function CIEXYZ(spd) {
      var result = new Object;

      // Interpolate bar values
      var cie = cie31by1();
      var xbar = interp1(cie.wavelength, cie.xbar, spd.wavelength, 0);
      var ybar = interp1(cie.wavelength, cie.ybar, spd.wavelength, 0);
      var zbar = interp1(cie.wavelength, cie.zbar, spd.wavelength, 0);

      var deltaWavelength = createDelta(spd.wavelength);
      var X = sumproduct(spd.value, arrayMul(deltaWavelength, xbar));
      var Y = sumproduct(spd.value, arrayMul(deltaWavelength, ybar));
      var Z = sumproduct(spd.value, arrayMul(deltaWavelength, zbar));

      result = [X.toFixed(3), Y.toFixed(3), Z.toFixed(3)];

      return result;
    }
    function CIEXY(xyz) {
      var X = (xyz[0]) * 1;
      var Y = (xyz[1]) * 1;
      var Z = (xyz[2]) * 1;
      xCoord = (X / (X + Y + Z)).toFixed(2);
      yCoord = (Y / (X + Y + Z)).toFixed(2);
      return "(" + xCoord + "," + yCoord + ")";
    }

    function cie31by1() {
      var results = new Object;
      results = {
        wavelength: [360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830],
        xbar: [0.0001299, 0.000145847, 0.000163802, 0.000184004, 0.00020669, 0.0002321, 0.000260728, 0.000293075, 0.000329388, 0.000369914, 0.0004149, 0.000464159, 0.000518986, 0.000581854, 0.000655235, 0.0007416, 0.00084503, 0.000964527, 0.001094949, 0.001231154, 0.001368, 0.00150205, 0.001642328, 0.001802382, 0.001995757, 0.002236, 0.002535385, 0.002892603, 0.003300829, 0.003753236, 0.004243, 0.004762389, 0.005330048, 0.005978712, 0.006741117, 0.00765, 0.008751373, 0.01002888, 0.0114217, 0.01286901, 0.01431, 0.01570443, 0.01714744, 0.01878122, 0.02074801, 0.02319, 0.02620736, 0.02978248, 0.03388092, 0.03846824, 0.04351, 0.0489956, 0.0550226, 0.0617188, 0.069212, 0.07763, 0.08695811, 0.09717672, 0.1084063, 0.1207672, 0.13438, 0.1493582, 0.1653957, 0.1819831, 0.198611, 0.21477, 0.2301868, 0.2448797, 0.2587773, 0.2718079, 0.2839, 0.2949438, 0.3048965, 0.3137873, 0.3216454, 0.3285, 0.3343513, 0.3392101, 0.3431213, 0.3461296, 0.34828, 0.3495999, 0.3501474, 0.350013, 0.349287, 0.34806, 0.3463733, 0.3442624, 0.3418088, 0.3390941, 0.3362, 0.3331977, 0.3300411, 0.3266357, 0.3228868, 0.3187, 0.3140251, 0.308884, 0.3032904, 0.2972579, 0.2908, 0.2839701, 0.2767214, 0.2689178, 0.2604227, 0.2511, 0.2408475, 0.2298512, 0.2184072, 0.2068115, 0.19536, 0.1842136, 0.1733273, 0.1626881, 0.1522833, 0.1421, 0.1321786, 0.1225696, 0.1132752, 0.1042979, 0.09564, 0.08729955, 0.07930804, 0.07171776, 0.06458099, 0.05795001, 0.05186211, 0.04628152, 0.04115088, 0.03641283, 0.03201, 0.0279172, 0.0241444, 0.020687, 0.0175404, 0.0147, 0.01216179, 0.00991996, 0.00796724, 0.006296346, 0.0049, 0.003777173, 0.00294532, 0.00242488, 0.002236293, 0.0024, 0.00292552, 0.00383656, 0.00517484, 0.00698208, 0.0093, 0.01214949, 0.01553588, 0.01947752, 0.02399277, 0.0291, 0.03481485, 0.04112016, 0.04798504, 0.05537861, 0.06327, 0.07163501, 0.08046224, 0.08973996, 0.09945645, 0.1096, 0.1201674, 0.1311145, 0.1423679, 0.1538542, 0.1655, 0.1772571, 0.18914, 0.2011694, 0.2133658, 0.2257499, 0.2383209, 0.2510668, 0.2639922, 0.2771017, 0.2904, 0.3038912, 0.3175726, 0.3314384, 0.3454828, 0.3597, 0.3740839, 0.3886396, 0.4033784, 0.4183115, 0.4334499, 0.4487953, 0.464336, 0.480064, 0.4959713, 0.5120501, 0.5282959, 0.5446916, 0.5612094, 0.5778215, 0.5945, 0.6112209, 0.6279758, 0.6447602, 0.6615697, 0.6784, 0.6952392, 0.7120586, 0.7288284, 0.7455188, 0.7621, 0.7785432, 0.7948256, 0.8109264, 0.8268248, 0.8425, 0.8579325, 0.8730816, 0.8878944, 0.9023181, 0.9163, 0.9297995, 0.9427984, 0.9552776, 0.9672179, 0.9786, 0.9893856, 0.9995488, 1.0090892, 1.0180064, 1.0263, 1.0339827, 1.040986, 1.047188, 1.0524667, 1.0567, 1.0597944, 1.0617992, 1.0628068, 1.0629096, 1.0622, 1.0607352, 1.0584436, 1.0552244, 1.0509768, 1.0456, 1.0390369, 1.0313608, 1.0226662, 1.0130477, 1.0026, 0.9913675, 0.9793314, 0.9664916, 0.9528479, 0.9384, 0.923194, 0.907244, 0.890502, 0.87292, 0.8544499, 0.835084, 0.814946, 0.794186, 0.772954, 0.7514, 0.7295836, 0.7075888, 0.6856022, 0.6638104, 0.6424, 0.6215149, 0.6011138, 0.5811052, 0.5613977, 0.5419, 0.5225995, 0.5035464, 0.4847436, 0.4661939, 0.4479, 0.4298613, 0.412098, 0.394644, 0.3775333, 0.3608, 0.3444563, 0.3285168, 0.3130192, 0.2980011, 0.2835, 0.2695448, 0.2561184, 0.2431896, 0.2307272, 0.2187, 0.2070971, 0.1959232, 0.1851708, 0.1748323, 0.1649, 0.1553667, 0.14623, 0.13749, 0.1291467, 0.1212, 0.1136397, 0.106465, 0.09969044, 0.09333061, 0.0874, 0.08190096, 0.07680428, 0.07207712, 0.06768664, 0.0636, 0.05980685, 0.05628216, 0.05297104, 0.04981861, 0.04677, 0.04378405, 0.04087536, 0.03807264, 0.03540461, 0.0329, 0.03056419, 0.02838056, 0.02634484, 0.02445275, 0.0227, 0.02108429, 0.01959988, 0.01823732, 0.01698717, 0.01584, 0.01479064, 0.01383132, 0.01294868, 0.0121292, 0.01135916, 0.01062935, 0.009938846, 0.009288422, 0.008678854, 0.008110916, 0.007582388, 0.007088746, 0.006627313, 0.006195408, 0.005790346, 0.005409826, 0.005052583, 0.004717512, 0.004403507, 0.004109457, 0.003833913, 0.003575748, 0.003334342, 0.003109075, 0.002899327, 0.002704348, 0.00252302, 0.002354168, 0.002196616, 0.00204919, 0.00191096, 0.001781438, 0.00166011, 0.001546459, 0.001439971, 0.001340042, 0.001246275, 0.001158471, 0.00107643, 0.000999949, 0.000928736, 0.000862433, 0.00080075, 0.000743396, 0.000690079, 0.000640516, 0.000594502, 0.000551865, 0.000512429, 0.000476021, 0.000442454, 0.000411512, 0.000382981, 0.000356649, 0.000332301, 0.000309759, 0.000288887, 0.000269539, 0.000251568, 0.000234826, 0.000219171, 0.000204526, 0.000190841, 0.000178065, 0.000166151, 0.000155024, 0.000144622, 0.00013491, 0.000125852, 0.000117413, 0.000109552, 0.000102225, 9.54E-05, 8.90E-05, 8.31E-05, 7.75E-05, 7.23E-05, 6.75E-05, 6.29E-05, 5.87E-05, 5.48E-05, 5.11E-05, 4.77E-05, 4.45E-05, 4.15E-05, 3.87E-05, 3.61E-05, 3.37E-05, 3.15E-05, 2.94E-05, 2.74E-05, 2.55E-05, 2.38E-05, 2.22E-05, 2.07E-05, 1.93E-05, 1.80E-05, 1.67E-05, 1.56E-05, 1.46E-05, 1.36E-05, 1.27E-05, 1.18E-05, 1.10E-05, 1.03E-05, 9.56E-06, 8.91E-06, 8.31E-06, 7.75E-06, 7.22E-06, 6.73E-06, 6.28E-06, 5.85E-06, 5.46E-06, 5.09E-06, 4.74E-06, 4.42E-06, 4.12E-06, 3.84E-06, 3.58E-06, 3.34E-06, 3.11E-06, 2.90E-06, 2.71E-06, 2.52E-06, 2.35E-06, 2.19E-06, 2.04E-06, 1.91E-06, 1.78E-06, 1.66E-06, 1.54E-06, 1.44E-06, 1.34E-06, 1.25E-06],
        ybar: [3.9170000E-06, 4.3935810E-06, 4.9296040E-06, 5.5321360E-06, 6.2082450E-06, 6.9650000E-06, 7.8132190E-06, 8.7673360E-06, 9.8398440E-06, 1.1043230E-05, 1.2390000E-05, 1.3886410E-05, 1.5557280E-05, 1.7442960E-05, 1.9583750E-05, 2.2020000E-05, 2.4839650E-05, 2.8041260E-05, 3.1531040E-05, 3.5215210E-05, 3.9000000E-05, 4.2826400E-05, 4.6914600E-05, 5.1589600E-05, 5.7176400E-05, 6.4000000E-05, 7.2344210E-05, 8.2212240E-05, 9.3508160E-05, 1.0613610E-04, 1.2000000E-04, 1.3498400E-04, 1.5149200E-04, 1.7020800E-04, 1.9181600E-04, 2.1700000E-04, 2.4690670E-04, 2.8124000E-04, 3.1852000E-04, 3.5726670E-04, 3.9600000E-04, 4.3371470E-04, 4.7302400E-04, 5.1787600E-04, 5.7221870E-04, 6.4000000E-04, 7.2456000E-04, 8.2550000E-04, 9.4116000E-04, 1.0698800E-03, 1.2100000E-03, 1.3620910E-03, 1.5307520E-03, 1.7203680E-03, 1.9353230E-03, 2.1800000E-03, 2.4548000E-03, 2.7640000E-03, 3.1178000E-03, 3.5264000E-03, 4.0000000E-03, 4.5462400E-03, 5.1593200E-03, 5.8292800E-03, 6.5461600E-03, 7.3000000E-03, 8.0865070E-03, 8.9087200E-03, 9.7676800E-03, 1.0664430E-02, 1.1600000E-02, 1.2573170E-02, 1.3582720E-02, 1.4629680E-02, 1.5715090E-02, 1.6840000E-02, 1.8007360E-02, 1.9214480E-02, 2.0453920E-02, 2.1718240E-02, 2.3000000E-02, 2.4294610E-02, 2.5610240E-02, 2.6958570E-02, 2.8351250E-02, 2.9800000E-02, 3.1310830E-02, 3.2883680E-02, 3.4521120E-02, 3.6225710E-02, 3.8000000E-02, 3.9846670E-02, 4.1768000E-02, 4.3766000E-02, 4.5842670E-02, 4.8000000E-02, 5.0243680E-02, 5.2573040E-02, 5.4980560E-02, 5.7458720E-02, 6.0000000E-02, 6.2601970E-02, 6.5277520E-02, 6.8042080E-02, 7.0911090E-02, 7.3900000E-02, 7.7016000E-02, 8.0266400E-02, 8.3666800E-02, 8.7232800E-02, 9.0980000E-02, 9.4917550E-02, 9.9045840E-02, 1.0336740E-01, 1.0788460E-01, 1.1260000E-01, 1.1753200E-01, 1.2267440E-01, 1.2799280E-01, 1.3345280E-01, 1.3902000E-01, 1.4467640E-01, 1.5046930E-01, 1.5646190E-01, 1.6271770E-01, 1.6930000E-01, 1.7624310E-01, 1.8355810E-01, 1.9127350E-01, 1.9941800E-01, 2.0802000E-01, 2.1711990E-01, 2.2673450E-01, 2.3685710E-01, 2.4748120E-01, 2.5860000E-01, 2.7018490E-01, 2.8229390E-01, 2.9505050E-01, 3.0857800E-01, 3.2300000E-01, 3.3840210E-01, 3.5468580E-01, 3.7169860E-01, 3.8928750E-01, 4.0730000E-01, 4.2562990E-01, 4.4430960E-01, 4.6339440E-01, 4.8293950E-01, 5.0300000E-01, 5.2356930E-01, 5.4451200E-01, 5.6569000E-01, 5.8696530E-01, 6.0820000E-01, 6.2934560E-01, 6.5030680E-01, 6.7087520E-01, 6.9084240E-01, 7.1000000E-01, 7.2818520E-01, 7.4546360E-01, 7.6196940E-01, 7.7783680E-01, 7.9320000E-01, 8.0811040E-01, 8.2249620E-01, 8.3630680E-01, 8.4949160E-01, 8.6200000E-01, 8.7381080E-01, 8.8496240E-01, 8.9549360E-01, 9.0544320E-01, 9.1485010E-01, 9.2373480E-01, 9.3209240E-01, 9.3992260E-01, 9.4722520E-01, 9.5400000E-01, 9.6025610E-01, 9.6600740E-01, 9.7126060E-01, 9.7602250E-01, 9.8030000E-01, 9.8409240E-01, 9.8741820E-01, 9.9031280E-01, 9.9281160E-01, 9.9495010E-01, 9.9671080E-01, 9.9809830E-01, 9.9911200E-01, 9.9974820E-01, 1.0000000E+00, 9.9985670E-01, 9.9930460E-01, 9.9832550E-01, 9.9689870E-01, 9.9500000E-01, 9.9260050E-01, 9.8974260E-01, 9.8644440E-01, 9.8272410E-01, 9.7860000E-01, 9.7408370E-01, 9.6917120E-01, 9.6385680E-01, 9.5813490E-01, 9.5200000E-01, 9.4545040E-01, 9.3849920E-01, 9.3116280E-01, 9.2345760E-01, 9.1540000E-01, 9.0700640E-01, 8.9827720E-01, 8.8920480E-01, 8.7978160E-01, 8.7000000E-01, 8.5986130E-01, 8.4939200E-01, 8.3862200E-01, 8.2758130E-01, 8.1630000E-01, 8.0479470E-01, 7.9308200E-01, 7.8119200E-01, 7.6915470E-01, 7.5700000E-01, 7.4475410E-01, 7.3242240E-01, 7.2000360E-01, 7.0749650E-01, 6.9490000E-01, 6.8221920E-01, 6.6947160E-01, 6.5667440E-01, 6.4384480E-01, 6.3100000E-01, 6.1815550E-01, 6.0531440E-01, 5.9247560E-01, 5.7963790E-01, 5.6680000E-01, 5.5396110E-01, 5.4113720E-01, 5.2835280E-01, 5.1563230E-01, 5.0300000E-01, 4.9046880E-01, 4.7803040E-01, 4.6567760E-01, 4.5340320E-01, 4.4120000E-01, 4.2908000E-01, 4.1703600E-01, 4.0503200E-01, 3.9303200E-01, 3.8100000E-01, 3.6891840E-01, 3.5682720E-01, 3.4477680E-01, 3.3281760E-01, 3.2100000E-01, 3.0933810E-01, 2.9785040E-01, 2.8659360E-01, 2.7562450E-01, 2.6500000E-01, 2.5476320E-01, 2.4488960E-01, 2.3533440E-01, 2.2605280E-01, 2.1700000E-01, 2.0816160E-01, 1.9954880E-01, 1.9115520E-01, 1.8297440E-01, 1.7500000E-01, 1.6722350E-01, 1.5964640E-01, 1.5227760E-01, 1.4512590E-01, 1.3820000E-01, 1.3150030E-01, 1.2502480E-01, 1.1877920E-01, 1.1276910E-01, 1.0700000E-01, 1.0147620E-01, 9.6188640E-02, 9.1122960E-02, 8.6264850E-02, 8.1600000E-02, 7.7120640E-02, 7.2825520E-02, 6.8710080E-02, 6.4769760E-02, 6.1000000E-02, 5.7396210E-02, 5.3955040E-02, 5.0673760E-02, 4.7549650E-02, 4.4580000E-02, 4.1758720E-02, 3.9084960E-02, 3.6563840E-02, 3.4200480E-02, 3.2000000E-02, 2.9962610E-02, 2.8076640E-02, 2.6329360E-02, 2.4708050E-02, 2.3200000E-02, 2.1800770E-02, 2.0501120E-02, 1.9281080E-02, 1.8120690E-02, 1.7000000E-02, 1.5903790E-02, 1.4837180E-02, 1.3810680E-02, 1.2834780E-02, 1.1920000E-02, 1.1068310E-02, 1.0273390E-02, 9.5333110E-03, 8.8461570E-03, 8.2100000E-03, 7.6237810E-03, 7.0854240E-03, 6.5914760E-03, 6.1384850E-03, 5.7230000E-03, 5.3430590E-03, 4.9957960E-03, 4.6764040E-03, 4.3800750E-03, 4.1020000E-03, 3.8384530E-03, 3.5890990E-03, 3.3542190E-03, 3.1340930E-03, 2.9290000E-03, 2.7381390E-03, 2.5598760E-03, 2.3932440E-03, 2.2372750E-03, 2.0910000E-03, 1.9535870E-03, 1.8245800E-03, 1.7035800E-03, 1.5901870E-03, 1.4840000E-03, 1.3844960E-03, 1.2912680E-03, 1.2040920E-03, 1.1227440E-03, 1.0470000E-03, 9.7658960E-04, 9.1110880E-04, 8.5013320E-04, 7.9323840E-04, 7.4000000E-04, 6.9008270E-04, 6.4331000E-04, 5.9949600E-04, 5.5845470E-04, 5.2000000E-04, 4.8391360E-04, 4.5005280E-04, 4.1834520E-04, 3.8871840E-04, 3.6110000E-04, 3.3538350E-04, 3.1144040E-04, 2.8916560E-04, 2.6845390E-04, 2.4920000E-04, 2.3130190E-04, 2.1468560E-04, 1.9928840E-04, 1.8504750E-04, 1.7190000E-04, 1.5977810E-04, 1.4860440E-04, 1.3830160E-04, 1.2879250E-04, 1.2000000E-04, 1.1185950E-04, 1.0432240E-04, 9.7335600E-05, 9.0845870E-05, 8.4800000E-05, 7.9146670E-05, 7.3858000E-05, 6.8916000E-05, 6.4302670E-05, 6.0000000E-05, 5.5981870E-05, 5.2225600E-05, 4.8718400E-05, 4.5447470E-05, 4.2400000E-05, 3.9561040E-05, 3.6915120E-05, 3.4448680E-05, 3.2148160E-05, 3.0000000E-05, 2.7991250E-05, 2.6113560E-05, 2.4360240E-05, 2.2724610E-05, 2.1200000E-05, 1.9778550E-05, 1.8452850E-05, 1.7216870E-05, 1.6064590E-05, 1.4990000E-05, 1.3987280E-05, 1.3051550E-05, 1.2178180E-05, 1.1362540E-05, 1.0600000E-05, 9.8858770E-06, 9.2173040E-06, 8.5923620E-06, 8.0091330E-06, 7.4657000E-06, 6.9595670E-06, 6.4879950E-06, 6.0486990E-06, 5.6393960E-06, 5.2578000E-06, 4.9017710E-06, 4.5697200E-06, 4.2601940E-06, 3.9717390E-06, 3.7029000E-06, 3.4521630E-06, 3.2183020E-06, 3.0003000E-06, 2.7971390E-06, 2.6078000E-06, 2.4312200E-06, 2.2665310E-06, 2.1130130E-06, 1.9699430E-06, 1.8366000E-06, 1.7122300E-06, 1.5962280E-06, 1.4880900E-06, 1.3873140E-06, 1.2934000E-06, 1.2058200E-06, 1.1241430E-06, 1.0480090E-06, 9.7705800E-07, 9.1093000E-07, 8.4925100E-07, 7.9172100E-07, 7.3809000E-07, 6.8811000E-07, 6.4153000E-07, 5.9809000E-07, 5.5757500E-07, 5.1980800E-07, 4.8461200E-07, 4.5181000E-07],
        zbar: [0.0006061, 0.000680879, 0.000765146, 0.000860012, 0.000966593, 0.001086, 0.001220586, 0.001372729, 0.001543579, 0.001734286, 0.001946, 0.002177777, 0.002435809, 0.002731953, 0.003078064, 0.003486, 0.003975227, 0.00454088, 0.00515832, 0.005802907, 0.006450001, 0.007083216, 0.007745488, 0.008501152, 0.009414544, 0.01054999, 0.0119658, 0.01365587, 0.01558805, 0.01773015, 0.02005001, 0.02251136, 0.02520288, 0.02827972, 0.03189704, 0.03621, 0.04143771, 0.04750372, 0.05411988, 0.06099803, 0.06785001, 0.07448632, 0.08136156, 0.08915364, 0.09854048, 0.1102, 0.1246133, 0.1417017, 0.1613035, 0.1832568, 0.2074, 0.2336921, 0.2626114, 0.2947746, 0.3307985, 0.3713, 0.4162091, 0.4654642, 0.5196948, 0.5795303, 0.6456, 0.7184838, 0.7967133, 0.8778459, 0.959439, 1.0390501, 1.1153673, 1.1884971, 1.2581233, 1.3239296, 1.3856, 1.4426352, 1.4948035, 1.5421903, 1.5848807, 1.62296, 1.6564048, 1.6852959, 1.7098745, 1.7303821, 1.74706, 1.7600446, 1.7696233, 1.7762637, 1.7804334, 1.7826, 1.7829682, 1.7816998, 1.7791982, 1.7758671, 1.77211, 1.7682589, 1.764039, 1.7589438, 1.7524663, 1.7441, 1.7335595, 1.7208581, 1.7059369, 1.6887372, 1.6692, 1.6475287, 1.6234127, 1.5960223, 1.564528, 1.5281, 1.4861114, 1.4395215, 1.3898799, 1.3387362, 1.28764, 1.2374223, 1.1878243, 1.1387611, 1.090148, 1.0419, 0.9941976, 0.9473473, 0.9014531, 0.8566193, 0.8129501, 0.7705173, 0.7294448, 0.6899136, 0.6521049, 0.6162, 0.5823286, 0.5504162, 0.5203376, 0.4919673, 0.46518, 0.4399246, 0.4161836, 0.3938822, 0.3729459, 0.3533, 0.3348578, 0.3175521, 0.3013375, 0.2861686, 0.272, 0.2588171, 0.2464838, 0.2347718, 0.2234533, 0.2123, 0.2011692, 0.1901196, 0.1792254, 0.1685608, 0.1582, 0.1481383, 0.1383758, 0.1289942, 0.1200751, 0.1117, 0.1039048, 0.09666748, 0.08998272, 0.08384531, 0.07824999, 0.07320899, 0.06867816, 0.06456784, 0.06078835, 0.05725001, 0.05390435, 0.05074664, 0.04775276, 0.04489859, 0.04216, 0.03950728, 0.03693564, 0.03445836, 0.03208872, 0.02984, 0.02771181, 0.02569444, 0.02378716, 0.02198925, 0.0203, 0.01871805, 0.01724036, 0.01586364, 0.01458461, 0.0134, 0.01230723, 0.01130188, 0.01037792, 0.009529306, 0.008749999, 0.0080352, 0.0073816, 0.0067854, 0.0062428, 0.005749999, 0.0053036, 0.0048998, 0.0045342, 0.0042024, 0.0039, 0.0036232, 0.0033706, 0.0031414, 0.0029348, 0.002749999, 0.0025852, 0.0024386, 0.0023094, 0.0021968, 0.0021, 0.002017733, 0.0019482, 0.0018898, 0.001840933, 0.0018, 0.001766267, 0.0017378, 0.0017112, 0.001683067, 0.001650001, 0.001610133, 0.0015644, 0.0015136, 0.001458533, 0.0014, 0.001336667, 0.00127, 0.001205, 0.001146667, 0.0011, 0.0010688, 0.0010494, 0.0010356, 0.0010212, 0.001, 0.00096864, 0.00092992, 0.00088688, 0.00084256, 0.0008, 0.00076096, 0.00072368, 0.00068592, 0.00064544, 0.0006, 0.000547867, 0.0004916, 0.0004354, 0.000383467, 0.00034, 0.000307253, 0.00028316, 0.00026544, 0.000251813, 0.00024, 0.000229547, 0.00022064, 0.00021196, 0.000202187, 0.00019, 0.000174213, 0.00015564, 0.00013596, 0.000116853, 0.0001, 8.61E-05, 7.46E-05, 6.50E-05, 5.69E-05, 5.00E-05, 4.42E-05, 3.95E-05, 3.57E-05, 3.26E-05, 3.00E-05, 2.77E-05, 2.56E-05, 2.36E-05, 2.18E-05, 2.00E-05, 1.81E-05, 1.62E-05, 1.42E-05, 1.21E-05, 1.00E-05, 7.73E-06, 5.40E-06, 3.20E-06, 1.33E-06, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
      };
      return results;
    }

    function interp1(xarray, yarray, array, value) {
      var result = [];
      if (Array.isArray(array)) {
        for (var i = 0; i < array.length; i++) {
          var x = array[i];
          result[i] = linearInterp(xarray, yarray, x, value);
        }
      } else {
        var x = array;
        result[0] = linearInterp(xarray, yarray, x, value);
      }
      return result;
    }

    function sumproduct(array1, array2) {
      var result = 0;
      for (var i = 0; i < array1.length; i++) {
        result += (array1[i] * array2[i]);
      }
      return result;
    }

    function linearInterp(xarray, yarray, x, value) {
      var result;
      var xmax = Math.max.apply(null, xarray);
      var xmin = Math.min.apply(null, xarray);
      if (x < xmin) {
        result = value;
      } else if (x > xmax) {
        result = value;
      } else if (x == xmax) {
        var yendindex = (yarray.length) - 1;
        result = yarray[yendindex];
      } else {
        var x1index = findx1index(x, xarray);
        var x1 = xarray[x1index];
        var x2 = xarray[x1index + 1];
        var y1 = yarray[x1index];
        var y2 = yarray[x1index + 1];

        result = lerp(x, x1, x2, y1, y2);
      }
      return result;
    }

    function findx1index(x, array) {
      var result = [];
      array.reverse();
      var rindex = -1;
      for (var i = 0; i < array.length; i++) {
        if (array[i] <= x) {
          rindex = i;
          break;
        }
      }
      result = array.length - (rindex + 1);
      array.reverse();
      return result;
    }

    function lerp(x, x1, x2, y1, y2) {
      var result = [];
      result = y1 + (y2 - y1) * (x - x1) / (x2 - x1);
      return result;
    }

    function createDelta(wavelength) {
      var result = [];
      for (var i = 0; i < wavelength.length; i++) {
        if (i == 0) {
          result[i] = (wavelength[i + 1] - wavelength[i]) / 2;
        } else if (i == (wavelength.length - 1)) {
          result[i] = (wavelength[i] - wavelength[i - 1]) / 2;
        } else {
          result[i] = ((wavelength[i] - wavelength[i - 1]) / 2 + (wavelength[i + 1] - wavelength[i]) / 2);
        }
      }
      return result;
    }

    function arrayMul(array1, array2) {
      var result = [];
      for (var i = 0; i < array1.length; i++) {
        result[i] = array1[i] * array2[i];
      }
      return result;
    }

    /*-------------------------------------------------------------XYZ CIE Coordinates-------------------------------------------------------------*/

    /*-------------------------------------------------------------CCT-------------------------------------------------------------*/


    function CCTcalc(spd) {
      // Load values
      var cie = cie31by1();
      var isoTempLines = isoTempLinesCalculate();
      var deltaWavelength = createDelta(spd.wavelength);

      // Interpolate bar values
      var xbar = interp1(cie.wavelength, cie.xbar, spd.wavelength, 0);
      var ybar = interp1(cie.wavelength, cie.ybar, spd.wavelength, 0);
      var zbar = interp1(cie.wavelength, cie.zbar, spd.wavelength, 0);

      // Trapz bar values
      var X = sumproduct(spd.value, arrayMul(deltaWavelength, xbar));
      var Y = sumproduct(spd.value, arrayMul(deltaWavelength, ybar));
      var Z = sumproduct(spd.value, arrayMul(deltaWavelength, zbar));

      // Base math
      x = X / (X + Y + Z);
      y = Y / (X + Y + Z);
      u = 4 * x / (-2 * x + 12 * y + 3);
      v = 6 * y / (-2 * x + 12 * y + 3);

      // Find adjacent lines to (us,vs)
      var index = 0;
      var d1 = ((v - isoTempLines.vt[1]) - isoTempLines.tt[1] * (u - isoTempLines.ut[1])) / Math.sqrt(1 + isoTempLines.tt[1] * isoTempLines.tt[1]);
      for (var i = 1; i < isoTempLines.T.length; i++) {
        var d2 = ((v - isoTempLines.vt[i]) - isoTempLines.tt[i] * (u - isoTempLines.ut[i])) / Math.sqrt(1 + isoTempLines.tt[i] * isoTempLines.tt[i]);
        if (d1 / d2 < 0) {
          index = i;
          break;
        } else {
          d1 = d2;
        }
      }

      // Calc Tc
      var Tc;
      if (index == 0) {
        Tc = NaN; //-1;
      } else {
        Tc = 1 / (1 / isoTempLines.T[index - 1] + d1 / (d1 - d2) * (1 / isoTempLines.T[index] - 1 / isoTempLines.T[index - 1]));
      }
      return Tc.toFixed(0);
    }


    function isoTempLinesCalculate() {
      var results = new Object;
      results = {
        T: [100000000, 1000000, 500000, 333333.33, 250000, 200000, 166666.67, 142857.14, 125000, 111111.11, 100000, 90909.091, 83333.333, 76923.077, 71428.571, 66666.667, 62500, 58823.529, 55555.556, 52631.579, 50000, 47619.048, 45454.545, 43478.261, 41666.667, 40000, 38461.538, 37037.037, 35714.286, 34482.759, 33333.333, 32258.065, 31250, 30303.03, 29411.765, 28571.429, 27777.778, 27027.027, 26315.789, 25641.026, 25000, 24390.244, 23809.524, 23255.814, 22727.273, 22222.222, 21739.13, 21276.596, 20833.333, 20408.163, 20000, 19607.843, 19230.769, 18867.925, 18518.519, 18181.818, 17857.143, 17543.86, 17241.379, 16949.153, 16666.667, 16393.443, 16129.032, 15873.016, 15625, 15384.615, 15151.515, 14925.373, 14705.882, 14492.754, 14285.714, 14084.507, 13888.889, 13698.63, 13513.514, 13333.333, 13157.895, 12987.013, 12820.513, 12658.228, 12500, 12345.679, 12195.122, 12048.193, 11904.762, 11764.706, 11627.907, 11494.253, 11363.636, 11235.955, 11111.111, 10989.011, 10869.565, 10752.688, 10638.298, 10526.316, 10416.667, 10309.278, 10204.082, 10101.01, 10000, 9900.9901, 9803.9216, 9708.7379, 9615.3846, 9523.8095, 9433.9623, 9345.7944, 9259.2593, 9174.3119, 9090.9091, 9009.009, 8928.5714, 8849.5575, 8771.9298, 8695.6522, 8620.6897, 8547.0085, 8474.5763, 8403.3613, 8333.3333, 8264.4628, 8196.7213, 8130.0813, 8064.5161, 8000, 7936.5079, 7874.0157, 7812.5, 7751.938, 7692.3077, 7633.5878, 7575.7576, 7518.797, 7462.6866, 7407.4074, 7352.9412, 7299.2701, 7246.3768, 7194.2446, 7142.8571, 7092.1986, 7042.2535, 6993.007, 6944.4444, 6896.5517, 6849.3151, 6802.7211, 6756.7568, 6711.4094, 6666.6667, 6622.5166, 6578.9474, 6535.9477, 6493.5065, 6451.6129, 6410.2564, 6369.4268, 6329.1139, 6289.3082, 6250, 6211.1801, 6172.8395, 6134.9693, 6097.561, 6060.6061, 6024.0964, 5988.024, 5952.381, 5917.1598, 5882.3529, 5847.9532, 5813.9535, 5780.3468, 5747.1264, 5714.2857, 5681.8182, 5649.7175, 5617.9775, 5586.5922, 5555.5556, 5524.8619, 5494.5055, 5464.4809, 5434.7826, 5405.4054, 5376.3441, 5347.5936, 5319.1489, 5291.0053, 5263.1579, 5235.6021, 5208.3333, 5181.3472, 5154.6392, 5128.2051, 5102.0408, 5076.1421, 5050.5051, 5025.1256, 5000, 4975.1244, 4950.495, 4926.1084, 4901.9608, 4878.0488, 4854.3689, 4830.9179, 4807.6923, 4784.689, 4761.9048, 4739.3365, 4716.9811, 4694.8357, 4672.8972, 4651.1628, 4629.6296, 4608.2949, 4587.156, 4566.21, 4545.4545, 4524.8869, 4504.5045, 4484.3049, 4464.2857, 4444.4444, 4424.7788, 4405.2863, 4385.9649, 4366.8122, 4347.8261, 4329.0043, 4310.3448, 4291.8455, 4273.5043, 4255.3191, 4237.2881, 4219.4093, 4201.6807, 4184.1004, 4166.6667, 4149.3776, 4132.2314, 4115.2263, 4098.3607, 4081.6327, 4065.0407, 4048.583, 4032.2581, 4016.0643, 4000, 3984.0637, 3968.254, 3952.5692, 3937.0079, 3921.5686, 3906.25, 3891.0506, 3875.969, 3861.0039, 3846.1538, 3831.4176, 3816.7939, 3802.2814, 3787.8788, 3773.5849, 3759.3985, 3745.3184, 3731.3433, 3717.4721, 3703.7037, 3690.0369, 3676.4706, 3663.0037, 3649.635, 3636.3636, 3623.1884, 3610.1083, 3597.1223, 3584.2294, 3571.4286, 3558.7189, 3546.0993, 3533.5689, 3521.1268, 3508.7719, 3496.5035, 3484.3206, 3472.2222, 3460.2076, 3448.2759, 3436.4261, 3424.6575, 3412.9693, 3401.3605, 3389.8305, 3378.3784, 3367.0034, 3355.7047, 3344.4816, 3333.3333, 3322.2591, 3311.2583, 3300.33, 3289.4737, 3278.6885, 3267.9739, 3257.329, 3246.7532, 3236.246, 3225.8065, 3215.4341, 3205.1282, 3194.8882, 3184.7134, 3174.6032, 3164.557, 3154.5741, 3144.6541, 3134.7962, 3125, 3115.2648, 3105.5901, 3095.9752, 3086.4198, 3076.9231, 3067.4847, 3058.104, 3048.7805, 3039.5137, 3030.303, 3021.148, 3012.0482, 3003.003, 2994.012, 2985.0746, 2976.1905, 2967.3591, 2958.5799, 2949.8525, 2941.1765, 2932.5513, 2923.9766, 2915.4519, 2906.9767, 2898.5507, 2890.1734, 2881.8444, 2873.5632, 2865.3295, 2857.1429, 2849.0028, 2840.9091, 2832.8612, 2824.8588, 2816.9014, 2808.9888, 2801.1204, 2793.2961, 2785.5153, 2777.7778, 2770.0831, 2762.4309, 2754.8209, 2747.2527, 2739.726, 2732.2404, 2724.7956, 2717.3913, 2710.0271, 2702.7027, 2695.4178, 2688.172, 2680.9651, 2673.7968, 2666.6667, 2659.5745, 2652.5199, 2645.5026, 2638.5224, 2631.5789, 2624.6719, 2617.801, 2610.9661, 2604.1667, 2597.4026, 2590.6736, 2583.9793, 2577.3196, 2570.6941, 2564.1026, 2557.5448, 2551.0204, 2544.5293, 2538.0711, 2531.6456, 2525.2525, 2518.8917, 2512.5628, 2506.2657, 2500, 2493.7656, 2487.5622, 2481.3896, 2475.2475, 2469.1358, 2463.0542, 2457.0025, 2450.9804, 2444.9878, 2439.0244, 2433.09, 2427.1845, 2421.3075, 2415.4589, 2409.6386, 2403.8462, 2398.0815, 2392.3445, 2386.6348, 2380.9524, 2375.2969, 2369.6682, 2364.0662, 2358.4906, 2352.9412, 2347.4178, 2341.9204, 2336.4486, 2331.0023, 2325.5814, 2320.1856, 2314.8148, 2309.4688, 2304.1475, 2298.8506, 2293.578, 2288.3295, 2283.105, 2277.9043, 2272.7273, 2267.5737, 2262.4434, 2257.3363, 2252.2523, 2247.191, 2242.1525, 2237.1365, 2232.1429, 2227.1715, 2222.2222, 2217.2949, 2212.3894, 2207.5055, 2202.6432, 2197.8022, 2192.9825, 2188.1838, 2183.4061, 2178.6492, 2173.913, 2169.1974, 2164.5022, 2159.8272, 2155.1724, 2150.5376, 2145.9227, 2141.3276, 2136.7521, 2132.1962, 2127.6596, 2123.1423, 2118.6441, 2114.1649, 2109.7046, 2105.2632, 2100.8403, 2096.4361, 2092.0502, 2087.6827, 2083.3333, 2079.0021, 2074.6888, 2070.3934, 2066.1157, 2061.8557, 2057.6132, 2053.3881, 2049.1803, 2044.9898, 2040.8163, 2036.6599, 2032.5203, 2028.3976, 2024.2915, 2020.202, 2016.129, 2012.0724, 2008.0321, 2004.008, 2000, 1996.008, 1992.0319, 1988.0716, 1984.127, 1980.198, 1976.2846, 1972.3866, 1968.5039, 1964.6365, 1960.7843, 1956.9472, 1953.125, 1949.3177, 1945.5253, 1941.7476, 1937.9845, 1934.236, 1930.5019, 1926.7823, 1923.0769, 1919.3858, 1915.7088, 1912.0459, 1908.3969, 1904.7619, 1901.1407, 1897.5332, 1893.9394, 1890.3592, 1886.7925, 1883.2392, 1879.6992, 1876.1726, 1872.6592, 1869.1589, 1865.6716, 1862.1974, 1858.7361, 1855.2876, 1851.8519, 1848.4288, 1845.0185, 1841.6206, 1838.2353, 1834.8624, 1831.5018, 1828.1536, 1824.8175, 1821.4936, 1818.1818, 1814.882, 1811.5942, 1808.3183, 1805.0542, 1801.8018, 1798.5612, 1795.3321, 1792.1147, 1788.9088, 1785.7143, 1782.5312, 1779.3594, 1776.1989, 1773.0496, 1769.9115, 1766.7845, 1763.6684, 1760.5634, 1757.4692, 1754.386, 1751.3135, 1748.2517, 1745.2007, 1742.1603, 1739.1304, 1736.1111, 1733.1023, 1730.1038, 1727.1157, 1724.1379, 1721.1704, 1718.2131, 1715.2659, 1712.3288, 1709.4017, 1706.4846, 1703.5775, 1700.6803, 1697.7929, 1694.9153, 1692.0474, 1689.1892, 1686.3406, 1683.5017, 1680.6723, 1677.8523, 1675.0419, 1672.2408, 1669.4491, 1666.6667],
        ut: [0.18006492, 0.18012013, 0.18017661, 0.18023382, 0.18029176, 0.18035045, 0.18040989, 0.18047009, 0.18053105, 0.18059279, 0.1806553, 0.18071861, 0.18078272, 0.18084763, 0.18091336, 0.18097991, 0.18104729, 0.1811155, 0.18118456, 0.18125447, 0.18132524, 0.18139688, 0.1814694, 0.1815428, 0.18161708, 0.18169227, 0.18176836, 0.18184537, 0.1819233, 0.18200215, 0.18208194, 0.18216267, 0.18224435, 0.18232699, 0.18241059, 0.18249516, 0.18258071, 0.18266725, 0.18275477, 0.18284329, 0.18293281, 0.18302335, 0.1831149, 0.18320747, 0.18330107, 0.1833957, 0.18349138, 0.1835881, 0.18368588, 0.18378471, 0.1838846, 0.18398557, 0.1840876, 0.18419072, 0.18429492, 0.18440021, 0.18450659, 0.18461407, 0.18472265, 0.18483234, 0.18494313, 0.18505505, 0.18516808, 0.18528224, 0.18539752, 0.18551394, 0.18563148, 0.18575017, 0.18586999, 0.18599096, 0.18611308, 0.18623634, 0.18636076, 0.18648633, 0.18661305, 0.18674094, 0.18686998, 0.18700019, 0.18713157, 0.18726411, 0.18739782, 0.18753269, 0.18766874, 0.18780596, 0.18794436, 0.18808393, 0.18822467, 0.18836659, 0.18850968, 0.18865395, 0.18879939, 0.18894602, 0.18909381, 0.18924279, 0.18939294, 0.18954427, 0.18969677, 0.18985045, 0.1900053, 0.19016132, 0.19031851, 0.19047688, 0.19063642, 0.19079712, 0.19095899, 0.19112203, 0.19128623, 0.19145159, 0.19161811, 0.19178579, 0.19195463, 0.19212462, 0.19229576, 0.19246806, 0.19264149, 0.19281608, 0.1929918, 0.19316867, 0.19334667, 0.1935258, 0.19370607, 0.19388746, 0.19406997, 0.19425361, 0.19443836, 0.19462423, 0.19481121, 0.1949993, 0.19518849, 0.19537878, 0.19557017, 0.19576265, 0.19595622, 0.19615088, 0.19634661, 0.19654343, 0.19674131, 0.19694027, 0.19714029, 0.19734137, 0.1975435, 0.19774669, 0.19795093, 0.19815621, 0.19836252, 0.19856988, 0.19877826, 0.19898766, 0.19919809, 0.19940953, 0.19962198, 0.19983544, 0.2000499, 0.20026536, 0.20048181, 0.20069925, 0.20091766, 0.20113706, 0.20135743, 0.20157876, 0.20180106, 0.20202432, 0.20224852, 0.20247368, 0.20269978, 0.20292681, 0.20315478, 0.20338367, 0.20361349, 0.20384422, 0.20407587, 0.20430842, 0.20454187, 0.20477622, 0.20501146, 0.20524759, 0.2054846, 0.20572248, 0.20596123, 0.20620085, 0.20644133, 0.20668267, 0.20692485, 0.20716788, 0.20741175, 0.20765645, 0.20790198, 0.20814833, 0.20839551, 0.20864349, 0.20889229, 0.20914189, 0.20939228, 0.20964347, 0.20989545, 0.2101482, 0.21040174, 0.21065605, 0.21091112, 0.21116696, 0.21142355, 0.2116809, 0.21193899, 0.21219783, 0.2124574, 0.2127177, 0.21297873, 0.21324048, 0.21350294, 0.21376612, 0.21403, 0.21429459, 0.21455987, 0.21482584, 0.2150925, 0.21535985, 0.21562787, 0.21589656, 0.21616591, 0.21643593, 0.21670661, 0.21697794, 0.21724992, 0.21752254, 0.2177958, 0.21806969, 0.21834421, 0.21861935, 0.21889512, 0.2191715, 0.21944849, 0.21972608, 0.22000427, 0.22028306, 0.22056245, 0.22084241, 0.22112296, 0.22140409, 0.2216858, 0.22196807, 0.2222509, 0.22253429, 0.22281824, 0.22310274, 0.22338779, 0.22367338, 0.22395951, 0.22424617, 0.22453336, 0.22482107, 0.2251093, 0.22539805, 0.22568732, 0.22597709, 0.22626736, 0.22655813, 0.2268494, 0.22714116, 0.2274334, 0.22772613, 0.22801933, 0.22831301, 0.22860716, 0.22890178, 0.22919686, 0.2294924, 0.22978839, 0.23008483, 0.23038172, 0.23067905, 0.23097682, 0.23127502, 0.23157365, 0.23187271, 0.2321722, 0.2324721, 0.23277242, 0.23307315, 0.23337429, 0.23367583, 0.23397777, 0.23428011, 0.23458284, 0.23488596, 0.23518947, 0.23549336, 0.23579763, 0.23610227, 0.23640728, 0.23671266, 0.23701841, 0.23732451, 0.23763098, 0.23793779, 0.23824496, 0.23855247, 0.23886033, 0.23916853, 0.23947706, 0.23978593, 0.24009512, 0.24040464, 0.24071449, 0.24102465, 0.24133514, 0.24164593, 0.24195704, 0.24226845, 0.24258016, 0.24289218, 0.24320449, 0.24351709, 0.24382999, 0.24414318, 0.24445664, 0.24477039, 0.24508442, 0.24539873, 0.2457133, 0.24602815, 0.24634326, 0.24665863, 0.24697427, 0.24729016, 0.24760631, 0.2479227, 0.24823935, 0.24855624, 0.24887337, 0.24919075, 0.24950836, 0.2498262, 0.25014427, 0.25046258, 0.25078111, 0.25109986, 0.25141883, 0.25173802, 0.25205742, 0.25237704, 0.25269686, 0.25301689, 0.25333712, 0.25365756, 0.25397819, 0.25429902, 0.25462004, 0.25494125, 0.25526265, 0.25558424, 0.25590601, 0.25622796, 0.25655008, 0.25687238, 0.25719486, 0.2575175, 0.25784031, 0.25816329, 0.25848643, 0.25880973, 0.25913319, 0.2594568, 0.25978057, 0.26010449, 0.26042855, 0.26075277, 0.26107712, 0.26140162, 0.26172625, 0.26205103, 0.26237593, 0.26270097, 0.26302614, 0.26335144, 0.26367686, 0.26400241, 0.26432808, 0.26465386, 0.26497976, 0.26530578, 0.26563191, 0.26595815, 0.26628449, 0.26661095, 0.2669375, 0.26726416, 0.26759092, 0.26791778, 0.26824473, 0.26857177, 0.26889891, 0.26922613, 0.26955344, 0.26988084, 0.27020832, 0.27053588, 0.27086353, 0.27119125, 0.27151904, 0.27184691, 0.27217485, 0.27250286, 0.27283093, 0.27315908, 0.27348729, 0.27381555, 0.27414388, 0.27447227, 0.27480072, 0.27512922, 0.27545777, 0.27578637, 0.27611503, 0.27644373, 0.27677248, 0.27710127, 0.2774301, 0.27775898, 0.27808789, 0.27841684, 0.27874582, 0.27907484, 0.2794039, 0.27973298, 0.28006209, 0.28039123, 0.28072039, 0.28104958, 0.28137879, 0.28170802, 0.28203726, 0.28236653, 0.28269581, 0.28302511, 0.28335442, 0.28368374, 0.28401307, 0.2843424, 0.28467175, 0.28500109, 0.28533045, 0.2856598, 0.28598915, 0.28631851, 0.28664786, 0.2869772, 0.28730655, 0.28763588, 0.2879652, 0.28829452, 0.28862382, 0.28895312, 0.28928239, 0.28961166, 0.2899409, 0.29027013, 0.29059934, 0.29092852, 0.29125769, 0.29158683, 0.29191594, 0.29224503, 0.29257409, 0.29290312, 0.29323213, 0.2935611, 0.29389003, 0.29421894, 0.2945478, 0.29487663, 0.29520543, 0.29553418, 0.29586289, 0.29619157, 0.29652019, 0.29684878, 0.29717732, 0.29750581, 0.29783425, 0.29816265, 0.29849099, 0.29881929, 0.29914753, 0.29947571, 0.29980385, 0.30013192, 0.30045994, 0.3007879, 0.30111581, 0.30144365, 0.30177143, 0.30209914, 0.30242679, 0.30275438, 0.3030819, 0.30340936, 0.30373674, 0.30406406, 0.30439131, 0.30471848, 0.30504559, 0.30537261, 0.30569957, 0.30602645, 0.30635325, 0.30667998, 0.30700662, 0.30733319, 0.30765967, 0.30798608, 0.3083124, 0.30863864, 0.30896479, 0.30929086, 0.30961684, 0.30994274, 0.31026855, 0.31059426, 0.31091989, 0.31124542, 0.31157087, 0.31189622, 0.31222148, 0.31254664, 0.3128717, 0.31319667, 0.31352154, 0.31384632, 0.31417099, 0.31449557, 0.31482004, 0.31514441, 0.31546868, 0.31579284, 0.3161169, 0.31644086, 0.31676471, 0.31708845, 0.31741209, 0.31773561, 0.31805903, 0.31838233, 0.31870553, 0.31902861, 0.31935158, 0.31967444, 0.31999718, 0.32031981, 0.32064232, 0.32096472, 0.321287, 0.32160916, 0.3219312, 0.32225312, 0.32257493, 0.32289661, 0.32321817, 0.3235396, 0.32386092, 0.32418211, 0.32450317, 0.32482411, 0.32514492, 0.32546561, 0.32578617, 0.3261066, 0.3264269, 0.32674707, 0.32706712, 0.32738703, 0.32770681, 0.32802646, 0.32834597, 0.32866535, 0.3289846, 0.32930371, 0.32962268, 0.32994152, 0.33026023, 0.33057879, 0.33089722, 0.33121551, 0.33153366, 0.33185167, 0.33216954, 0.33248726, 0.33280485, 0.33312229, 0.33343959, 0.33375675, 0.33407376, 0.33439063, 0.33470735, 0.33502393, 0.33534035, 0.33565664, 0.33597277, 0.33628876, 0.33660459, 0.33692028, 0.33723582],
        vt: [0.26352349, 0.26374983, 0.26398041, 0.26421295, 0.26444744, 0.26468388, 0.26492224, 0.26516253, 0.26540473, 0.26564882, 0.2658948, 0.26614266, 0.26639237, 0.26664393, 0.26689732, 0.26715253, 0.26740954, 0.26766834, 0.26792892, 0.26819125, 0.26845532, 0.26872111, 0.2689886, 0.26925778, 0.26952864, 0.26980114, 0.27007527, 0.27035102, 0.27062836, 0.27090727, 0.27118773, 0.27146973, 0.27175323, 0.27203823, 0.27232469, 0.2726126, 0.27290193, 0.27319267, 0.27348478, 0.27377825, 0.27407306, 0.27436917, 0.27466657, 0.27496523, 0.27526513, 0.27556624, 0.27586854, 0.27617201, 0.27647662, 0.27678235, 0.27708917, 0.27739705, 0.27770598, 0.27801592, 0.27832685, 0.27863875, 0.27895159, 0.27926534, 0.27957998, 0.27989548, 0.28021182, 0.28052898, 0.28084692, 0.28116562, 0.28148505, 0.2818052, 0.28212603, 0.28244752, 0.28276964, 0.28309237, 0.28341568, 0.28373954, 0.28406394, 0.28438885, 0.28471423, 0.28504007, 0.28536635, 0.28569303, 0.28602009, 0.28634751, 0.28667526, 0.28700332, 0.28733167, 0.28766028, 0.28798912, 0.28831818, 0.28864742, 0.28897684, 0.2893064, 0.28963608, 0.28996585, 0.2902957, 0.29062561, 0.29095555, 0.29128549, 0.29161542, 0.29194532, 0.29227517, 0.29260493, 0.2929346, 0.29326415, 0.29359357, 0.29392282, 0.2942519, 0.29458078, 0.29490944, 0.29523786, 0.29556603, 0.29589392, 0.29622152, 0.2965488, 0.29687576, 0.29720237, 0.29752862, 0.29785448, 0.29817995, 0.29850499, 0.29882961, 0.29915378, 0.29947748, 0.2998007, 0.30012342, 0.30044563, 0.30076732, 0.30108846, 0.30140905, 0.30172906, 0.30204849, 0.30236733, 0.30268555, 0.30300314, 0.30332009, 0.3036364, 0.30395204, 0.304267, 0.30458127, 0.30489484, 0.3052077, 0.30551983, 0.30583123, 0.30614188, 0.30645178, 0.3067609, 0.30706925, 0.30737681, 0.30768357, 0.30798952, 0.30829465, 0.30859895, 0.30890242, 0.30920504, 0.30950681, 0.30980772, 0.31010775, 0.31040691, 0.31070518, 0.31100255, 0.31129902, 0.31159458, 0.31188923, 0.31218295, 0.31247574, 0.3127676, 0.31305851, 0.31334847, 0.31363747, 0.31392551, 0.31421259, 0.31449869, 0.31478382, 0.31506796, 0.31535111, 0.31563327, 0.31591443, 0.31619458, 0.31647373, 0.31675187, 0.31702899, 0.3173051, 0.31758017, 0.31785422, 0.31812725, 0.31839923, 0.31867018, 0.31894009, 0.31920895, 0.31947677, 0.31974353, 0.32000925, 0.32027391, 0.32053751, 0.32080005, 0.32106153, 0.32132195, 0.3215813, 0.32183959, 0.3220968, 0.32235295, 0.32260802, 0.32286202, 0.32311494, 0.32336678, 0.32361755, 0.32386724, 0.32411586, 0.32436339, 0.32460984, 0.32485521, 0.32509949, 0.3253427, 0.32558482, 0.32582586, 0.32606581, 0.32630468, 0.32654247, 0.32677917, 0.32701479, 0.32724933, 0.32748279, 0.32771516, 0.32794645, 0.32817666, 0.32840578, 0.32863383, 0.3288608, 0.32908668, 0.32931149, 0.32953522, 0.32975788, 0.32997946, 0.33019996, 0.3304194, 0.33063776, 0.33085504, 0.33107126, 0.33128641, 0.3315005, 0.33171351, 0.33192547, 0.33213636, 0.33234619, 0.33255496, 0.33276267, 0.33296933, 0.33317493, 0.33337948, 0.33358298, 0.33378543, 0.33398684, 0.3341872, 0.33438651, 0.33458479, 0.33478203, 0.33497823, 0.3351734, 0.33536753, 0.33556063, 0.33575271, 0.33594376, 0.33613379, 0.33632279, 0.33651078, 0.33669775, 0.33688371, 0.33706866, 0.3372526, 0.33743553, 0.33761746, 0.33779839, 0.33797832, 0.33815725, 0.33833519, 0.33851214, 0.3386881, 0.33886308, 0.33903707, 0.33921009, 0.33938212, 0.33955319, 0.33972328, 0.3398924, 0.34006056, 0.34022775, 0.34039399, 0.34055926, 0.34072359, 0.34088696, 0.34104938, 0.34121086, 0.34137139, 0.34153099, 0.34168965, 0.34184738, 0.34200417, 0.34216004, 0.34231498, 0.342469, 0.34262211, 0.3427743, 0.34292557, 0.34307594, 0.3432254, 0.34337396, 0.34352162, 0.34366838, 0.34381425, 0.34395923, 0.34410332, 0.34424652, 0.34438885, 0.3445303, 0.34467087, 0.34481057, 0.3449494, 0.34508737, 0.34522448, 0.34536072, 0.34549612, 0.34563066, 0.34576435, 0.34589719, 0.34602919, 0.34616036, 0.34629068, 0.34642017, 0.34654884, 0.34667667, 0.34680369, 0.34692988, 0.34705526, 0.34717982, 0.34730357, 0.34742651, 0.34754865, 0.34766999, 0.34779053, 0.34791028, 0.34802924, 0.34814741, 0.34826479, 0.34838139, 0.34849722, 0.34861226, 0.34872654, 0.34884005, 0.34895279, 0.34906477, 0.34917599, 0.34928646, 0.34939617, 0.34950514, 0.34961335, 0.34972083, 0.34982756, 0.34993356, 0.35003882, 0.35014336, 0.35024716, 0.35035025, 0.35045261, 0.35055425, 0.35065518, 0.3507554, 0.35085491, 0.35095372, 0.35105182, 0.35114923, 0.35124593, 0.35134195, 0.35143728, 0.35153192, 0.35162588, 0.35171915, 0.35181176, 0.35190368, 0.35199494, 0.35208553, 0.35217545, 0.35226471, 0.35235332, 0.35244126, 0.35252856, 0.3526152, 0.3527012, 0.35278656, 0.35287128, 0.35295535, 0.3530388, 0.35312161, 0.3532038, 0.35328536, 0.35336629, 0.35344661, 0.35352631, 0.3536054, 0.35368388, 0.35376174, 0.35383901, 0.35391567, 0.35399174, 0.3540672, 0.35414208, 0.35421636, 0.35429006, 0.35436317, 0.35443571, 0.35450766, 0.35457904, 0.35464984, 0.35472007, 0.35478974, 0.35485884, 0.35492738, 0.35499536, 0.35506279, 0.35512966, 0.35519598, 0.35526176, 0.35532699, 0.35539167, 0.35545582, 0.35551943, 0.35558251, 0.35564505, 0.35570707, 0.35576856, 0.35582952, 0.35588997, 0.3559499, 0.35600931, 0.35606821, 0.3561266, 0.35618448, 0.35624186, 0.35629874, 0.35635511, 0.35641099, 0.35646638, 0.35652127, 0.35657568, 0.35662959, 0.35668303, 0.35673598, 0.35678845, 0.35684045, 0.35689197, 0.35694303, 0.35699361, 0.35704372, 0.35709338, 0.35714257, 0.3571913, 0.35723957, 0.35728739, 0.35733476, 0.35738168, 0.35742816, 0.35747419, 0.35751977, 0.35756492, 0.35760963, 0.3576539, 0.35769775, 0.35774116, 0.35778414, 0.3578267, 0.35786883, 0.35791055, 0.35795184, 0.35799272, 0.35803319, 0.35807324, 0.35811289, 0.35815212, 0.35819096, 0.35822938, 0.35826741, 0.35830504, 0.35834228, 0.35837912, 0.35841556, 0.35845162, 0.3584873, 0.35852258, 0.35855748, 0.35859201, 0.35862615, 0.35865992, 0.35869331, 0.35872633, 0.35875898, 0.35879126, 0.35882318, 0.35885473, 0.35888592, 0.35891675, 0.35894722, 0.35897734, 0.3590071, 0.35903651, 0.35906557, 0.35909428, 0.35912265, 0.35915067, 0.35917835, 0.3592057, 0.3592327, 0.35925937, 0.3592857, 0.3593117, 0.35933738, 0.35936272, 0.35938774, 0.35941243, 0.3594368, 0.35946085, 0.35948458, 0.35950799, 0.35953109, 0.35955388, 0.35957635, 0.35959852, 0.35962037, 0.35964193, 0.35966317, 0.35968412, 0.35970476, 0.35972511, 0.35974515, 0.35976491, 0.35978437, 0.35980354, 0.35982241, 0.359841, 0.35985931, 0.35987733, 0.35989506, 0.35991251, 0.35992969, 0.35994658, 0.3599632, 0.35997955, 0.35999562, 0.36001142, 0.36002695, 0.36004222, 0.36005721, 0.36007194, 0.36008641, 0.36010062, 0.36011456, 0.36012825, 0.36014168, 0.36015486, 0.36016778, 0.36018045, 0.36019286, 0.36020503, 0.36021696, 0.36022863, 0.36024006, 0.36025125, 0.3602622, 0.3602729, 0.36028337, 0.3602936, 0.36030359, 0.36031336, 0.36032288, 0.36033218, 0.36034125, 0.36035008, 0.36035869, 0.36036708, 0.36037524, 0.36038318, 0.3603909, 0.36039839, 0.36040567, 0.36041273, 0.36041958, 0.36042621, 0.36043263, 0.36043883, 0.36044483, 0.36045062, 0.3604562, 0.36046157, 0.36046673, 0.3604717, 0.36047646, 0.36048102, 0.36048538, 0.36048954, 0.3604935, 0.36049727, 0.36050084, 0.36050422, 0.36050741, 0.3605104, 0.36051321],
        tt: [-0.24342099, -0.24443454, -0.24548344, -0.24655767, -0.2476573, -0.2487824, -0.24993306, -0.25110935, -0.25231133, -0.25353909, -0.25479268, -0.25607218, -0.25737766, -0.25870918, -0.2600668, -0.26145058, -0.26286059, -0.26429688, -0.26575951, -0.26724854, -0.26876402, -0.27030601, -0.27187455, -0.2734697, -0.27509151, -0.27674003, -0.27841529, -0.28011736, -0.28184627, -0.28360206, -0.28538478, -0.28719446, -0.28903116, -0.2908949, -0.29278572, -0.29470367, -0.29664877, -0.29862106, -0.30062057, -0.30264735, -0.30470141, -0.30678279, -0.30889152, -0.31102763, -0.31319114, -0.3153821, -0.31760052, -0.31984643, -0.32211985, -0.32442082, -0.32674936, -0.32910549, -0.33148924, -0.33390063, -0.33633969, -0.33880643, -0.34130089, -0.34382308, -0.34637303, -0.34895076, -0.35155629, -0.35418965, -0.35685086, -0.35953994, -0.36225691, -0.3650018, -0.36777462, -0.37057541, -0.37340419, -0.37626097, -0.37914579, -0.38205867, -0.38499962, -0.38796869, -0.39096589, -0.39399125, -0.3970448, -0.40012657, -0.40323657, -0.40637485, -0.40954143, -0.41273634, -0.41595961, -0.41921128, -0.42249138, -0.42579994, -0.429137, -0.43250259, -0.43589674, -0.43931951, -0.44277092, -0.44625103, -0.44975986, -0.45329746, -0.45686388, -0.46045915, -0.46408334, -0.46773649, -0.47141864, -0.47512984, -0.47887016, -0.48263964, -0.48643833, -0.49026631, -0.49412362, -0.49801032, -0.50192648, -0.50587216, -0.50984743, -0.51385236, -0.517887, -0.52195144, -0.52604575, -0.53017, -0.53432427, -0.53850864, -0.54272319, -0.546968, -0.55124315, -0.55554874, -0.55988484, -0.56425156, -0.56864899, -0.57307722, -0.57753635, -0.58202647, -0.5865477, -0.59110013, -0.59568388, -0.60029905, -0.60494574, -0.60962409, -0.6143342, -0.61907619, -0.62385019, -0.62865631, -0.63349468, -0.63836543, -0.6432687, -0.64820461, -0.65317331, -0.65817493, -0.66320961, -0.6682775, -0.67337874, -0.67851349, -0.6836819, -0.68888412, -0.69412031, -0.69939063, -0.70469525, -0.71003433, -0.71540804, -0.72081655, -0.72626004, -0.73173869, -0.73725268, -0.74280219, -0.74838741, -0.75400853, -0.75966574, -0.76535924, -0.77108923, -0.77685591, -0.78265949, -0.78850017, -0.79437817, -0.8002937, -0.80624698, -0.81223824, -0.81826769, -0.82433557, -0.8304421, -0.83658753, -0.84277209, -0.84899602, -0.85525957, -0.86156298, -0.86790651, -0.87429042, -0.88071495, -0.88718038, -0.89368698, -0.900235, -0.90682473, -0.91345644, -0.92013041, -0.92684693, -0.93360628, -0.94040876, -0.94725467, -0.95414429, -0.96107794, -0.96805593, -0.97507856, -0.98214615, -0.98925902, -0.99641749, -1.0036219, -1.0108726, -1.0181698, -1.025514, -1.0329055, -1.0403446, -1.0478317, -1.0553671, -1.0629512, -1.0705844, -1.0782671, -1.0859995, -1.0937821, -1.1016153, -1.1094995, -1.117435, -1.1254222, -1.1334616, -1.1415536, -1.1496986, -1.1578969, -1.166149, -1.1744554, -1.1828164, -1.1912326, -1.1997043, -1.208232, -1.2168161, -1.2254571, -1.2341555, -1.2429117, -1.2517263, -1.2605996, -1.2695322, -1.2785245, -1.2875771, -1.2966905, -1.3058651, -1.3151016, -1.3244003, -1.3337618, -1.3431867, -1.3526755, -1.3622287, -1.3718469, -1.3815306, -1.3912805, -1.401097, -1.4109808, -1.4209324, -1.4309524, -1.4410415, -1.4512002, -1.4614291, -1.4717289, -1.4821001, -1.4925435, -1.5030596, -1.5136491, -1.5243126, -1.5350509, -1.5458645, -1.5567542, -1.5677206, -1.5787645, -1.5898865, -1.6010874, -1.6123678, -1.6237286, -1.6351703, -1.6466939, -1.6582999, -1.6699893, -1.6817627, -1.693621, -1.7055649, -1.7175952, -1.7297128, -1.7419184, -1.7542129, -1.7665972, -1.779072, -1.7916382, -1.8042968, -1.8170486, -1.8298944, -1.8428352, -1.8558719, -1.8690054, -1.8822366, -1.8955666, -1.9089962, -1.9225265, -1.9361583, -1.9498928, -1.9637309, -1.9776736, -1.991722, -2.0058771, -2.0201399, -2.0345116, -2.0489933, -2.063586, -2.0782908, -2.0931089, -2.1080415, -2.1230896, -2.1382545, -2.1535373, -2.1689392, -2.1844616, -2.2001055, -2.2158723, -2.2317632, -2.2477795, -2.2639225, -2.2801935, -2.296594, -2.3131251, -2.3297883, -2.346585, -2.3635166, -2.3805846, -2.3977903, -2.4151352, -2.4326209, -2.4502489, -2.4680206, -2.4859376, -2.5040015, -2.522214, -2.5405765, -2.5590908, -2.5777584, -2.5965812, -2.6155608, -2.634699, -2.6539974, -2.6734579, -2.6930823, -2.7128725, -2.7328302, -2.7529574, -2.773256, -2.793728, -2.8143753, -2.8351999, -2.8562038, -2.8773892, -2.8987581, -2.9203126, -2.9420549, -2.9639871, -2.9861116, -3.0084305, -3.0309462, -3.0536609, -3.076577, -3.099697, -3.1230232, -3.1465581, -3.1703043, -3.1942643, -3.2184406, -3.2428359, -3.2674529, -3.2922943, -3.3173629, -3.3426613, -3.3681926, -3.3939595, -3.4199651, -3.4462123, -3.4727041, -3.4994437, -3.5264341, -3.5536785, -3.5811803, -3.6089426, -3.6369689, -3.6652625, -3.6938269, -3.7226656, -3.7517823, -3.7811805, -3.810864, -3.8408365, -3.8711019, -3.901664, -3.9325269, -3.9636945, -3.9951711, -4.0269607, -4.0590677, -4.0914964, -4.1242511, -4.1573364, -4.1907569, -4.2245171, -4.258622, -4.2930762, -4.3278847, -4.3630525, -4.3985848, -4.4344866, -4.4707634, -4.5074205, -4.5444634, -4.5818977, -4.6197291, -4.6579635, -4.6966068, -4.735665, -4.7751444, -4.8150511, -4.8553916, -4.8961725, -4.9374004, -4.9790821, -5.0212246, -5.063835, -5.1069205, -5.1504884, -5.1945463, -5.2391019, -5.284163, -5.3297376, -5.3758339, -5.4224603, -5.4696252, -5.5173374, -5.5656058, -5.6144395, -5.6638477, -5.7138399, -5.7644258, -5.8156154, -5.8674187, -5.9198462, -5.9729083, -6.026616, -6.0809802, -6.1360123, -6.191724, -6.2481269, -6.3052334, -6.3630557, -6.4216066, -6.480899, -6.5409463, -6.6017622, -6.6633604, -6.7257555, -6.7889619, -6.8529947, -6.9178692, -6.9836012, -7.0502069, -7.1177028, -7.1861058, -7.2554334, -7.3257034, -7.3969341, -7.4691442, -7.5423531, -7.6165806, -7.6918468, -7.7681727, -7.8455796, -7.9240895, -8.0037251, -8.0845094, -8.1664663, -8.2496203, -8.3339966, -8.419621, -8.5065202, -8.5947216, -8.6842532, -8.7751441, -8.867424, -8.9611238, -9.0562749, -9.15291, -9.2510625, -9.3507671, -9.4520592, -9.5549756, -9.6595541, -9.7658337, -9.8738546, -9.9836584, -10.095288, -10.208787, -10.324202, -10.441579, -10.560968, -10.682419, -10.805983, -10.931715, -11.05967, -11.189905, -11.322481, -11.457458, -11.594901, -11.734876, -11.87745, -12.022696, -12.170686, -12.321497, -12.475208, -12.6319, -12.79166, -12.954575, -13.120738, -13.290244, -13.463192, -13.639686, -13.819833, -14.003744, -14.191537, -14.383332, -14.579256, -14.779441, -14.984023, -15.193147, -15.406961, -15.625623, -15.849296, -16.078149, -16.312362, -16.552122, -16.797624, -17.049074, -17.306685, -17.570684, -17.841306, -18.1188, -18.403427, -18.695461, -18.995189, -19.302917, -19.618962, -19.943662, -20.277373, -20.620469, -20.973347, -21.336426, -21.710147, -22.094981, -22.491425, -22.900005, -23.321281, -23.755848, -24.204337, -24.667421, -25.145818, -25.640291, -26.151657, -26.680789, -27.22862, -27.796151, -28.384454, -28.994681, -29.628073, -30.285962, -30.969788, -31.681105, -32.421591, -33.193068, -33.99751, -34.837063, -35.714062, -36.631057, -37.590832, -38.596437, -39.651217, -40.758854, -41.923404, -43.14935, -44.441659, -45.805847, -47.248061, -48.775167, -50.394863, -52.115806, -53.947767, -55.901815, -57.990543, -60.228335, -62.631702, -65.219684, -68.01436, -71.041472, -74.331225, -77.919292, -81.848114, -86.168583, -90.942257, -96.244308, -102.1675, -108.82768, -116.37139]
      };
      return results;
    }

    /*-------------------------------------------------------------GAI-------------------------------------------------------------*/

    function gamutAreaCalculate(spd) {
      // Load values
      var cie = cie31by1();
      var isoTempLines = isoTempLinesCalculate();
      var deltaWavelength = createDelta(spd.wavelength);

      // Interpolate bar values
      var xbar = interp1(cie.wavelength, cie.xbar, spd.wavelength, 0);
      var ybar = interp1(cie.wavelength, cie.ybar, spd.wavelength, 0);
      var zbar = interp1(cie.wavelength, cie.zbar, spd.wavelength, 0);

      // Load TCS Color Standards
      var TCS = TCSCalc();
      var TCS_1 = new Object;
      for (var iCS in TCS.color_standards) {
        if (TCS.color_standards.hasOwnProperty(iCS)) {
          TCS_1[iCS] = interp1(TCS.wavelength, arrayScalar(TCS.color_standards[iCS], 1 / 1000), spd.wavelength, 0);
        }
      }

      // Calculate u, v chromaticity coordinates of samples under test illuminant
      var xki = new Object;
      var yki = new Object;
      var uki = new Object;
      var vki = new Object;
      var ukiprime = new Object;
      var vkiprime = new Object;
      for (var iCS in TCS_1) {
        if (TCS_1.hasOwnProperty(iCS)) {
          //test illuminant, uki, vki
          X = sumproduct(arrayMul(spd.value, TCS_1[iCS]), arrayMul(deltaWavelength, xbar));
          Y = sumproduct(arrayMul(spd.value, TCS_1[iCS]), arrayMul(deltaWavelength, ybar));
          Z = sumproduct(arrayMul(spd.value, TCS_1[iCS]), arrayMul(deltaWavelength, zbar));
          xki[iCS] = X / (X + Y + Z);
          yki[iCS] = Y / (X + Y + Z);
          uki[iCS] = 4 * X / (X + 15 * Y + 3 * Z);
          vki[iCS] = 6 * Y / (X + 15 * Y + 3 * Z);
          ukiprime[iCS] = uki[iCS];
          vkiprime[iCS] = vki[iCS] * 1.5;
        }
      }

      // Select sources 1 - 8
      var iSource = 0;
      var ukprimeArray = [];
      var vkprimeArray = [];
      for (var iCS in TCS_1) {
        if (TCS_1.hasOwnProperty(iCS)) {
          ukprimeArray[iSource] = ukiprime[iCS];
          vkprimeArray[iSource] = vkiprime[iCS];
          iSource = iSource + 1;
        }
      }
      ukprimeArrayS = ukprimeArray.slice(0, 8);
      vkprimeArrayS = vkprimeArray.slice(0, 8);

      // Calculate area with selected sources
      var ukprimeArraySR1 = ukprimeArrayS.slice(1, 8);
      ukprimeArraySR1.push(ukprimeArrayS[0]);
      var vkprimeArraySR1 = vkprimeArrayS.slice(1, 8);
      vkprimeArraySR1.push(vkprimeArrayS[0]);
      var separ = arrayMul(arraySub(ukprimeArraySR1, ukprimeArrayS), arrayAdd(vkprimeArraySR1, vkprimeArrayS));
      var area = Math.abs(arrSum(separ) / 2);

      var gai = (area / 0.007354) * 100;

      return gai.toFixed(2)
    }


    function TCSCalc() {
      var results = new Object;
      results = {
        wavelength: [360, 365, 370, 375, 380, 385, 390, 395, 400, 405, 410, 415, 420, 425, 430, 435, 440, 445, 450, 455, 460, 465, 470, 475, 480, 485, 490, 495, 500, 505, 510, 515, 520, 525, 530, 535, 540, 545, 550, 555, 560, 565, 570, 575, 580, 585, 590, 595, 600, 605, 610, 615, 620, 625, 630, 635, 640, 645, 650, 655, 660, 665, 670, 675, 680, 685, 690, 695, 700, 705, 710, 715, 720, 725, 730, 735, 740, 745, 750, 755, 760, 765, 770, 775, 780, 785, 790, 795, 800, 805, 810, 815, 820, 825, 830],
        color_standards: {
          R01: [116, 136, 159, 190, 219, 239, 252, 256, 256, 254, 252, 248, 244, 240, 237, 232, 230, 226, 225, 222, 220, 218, 216, 214, 214, 214, 216, 218, 223, 225, 226, 226, 225, 225, 227, 230, 236, 245, 253, 262, 272, 283, 298, 318, 341, 367, 390, 409, 424, 435, 442, 448, 450, 451, 451, 451, 451, 451, 450, 450, 451, 451, 453, 454, 455, 457, 458, 460, 462, 463, 464, 465, 466, 466, 466, 466, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 467, 466, 466, 466, 466, 466, 465, 464, 464],
          R02: [53, 55, 59, 64, 70, 79, 89, 101, 111, 116, 118, 120, 121, 122, 122, 122, 123, 124, 127, 128, 131, 134, 138, 143, 150, 159, 174, 190, 207, 225, 242, 253, 260, 264, 267, 269, 272, 276, 282, 289, 299, 309, 322, 329, 335, 339, 341, 341, 342, 342, 342, 341, 341, 339, 339, 338, 338, 337, 336, 335, 334, 332, 332, 331, 331, 330, 329, 328, 328, 327, 326, 325, 324, 324, 324, 323, 322, 321, 320, 318, 316, 315, 315, 314, 314, 313, 313, 312, 312, 311, 311, 311, 311, 311, 310],
          R03: [58, 59, 61, 63, 65, 68, 70, 72, 73, 73, 74, 74, 74, 73, 73, 73, 73, 73, 74, 75, 77, 80, 85, 94, 109, 126, 148, 172, 198, 221, 241, 260, 278, 302, 339, 370, 392, 399, 400, 393, 380, 365, 349, 332, 315, 299, 285, 272, 264, 257, 252, 247, 241, 235, 229, 224, 220, 217, 216, 216, 219, 224, 230, 238, 251, 269, 288, 312, 340, 366, 390, 412, 431, 447, 460, 472, 481, 488, 493, 497, 500, 502, 505, 510, 516, 520, 524, 527, 531, 535, 539, 544, 548, 552, 555],
          R04: [57, 59, 62, 67, 74, 83, 93, 105, 116, 121, 124, 126, 128, 131, 135, 139, 144, 151, 161, 172, 186, 205, 229, 254, 281, 308, 332, 352, 370, 383, 390, 394, 395, 392, 385, 377, 367, 354, 341, 327, 312, 296, 280, 263, 247, 229, 214, 198, 185, 175, 169, 164, 160, 156, 154, 152, 151, 149, 148, 148, 148, 149, 151, 154, 158, 162, 165, 168, 170, 171, 170, 168, 166, 164, 164, 165, 168, 172, 177, 181, 185, 189, 192, 194, 197, 200, 204, 210, 218, 225, 233, 243, 254, 264, 274],
          R05: [143, 187, 233, 269, 295, 306, 310, 312, 313, 315, 319, 322, 326, 330, 334, 339, 346, 352, 360, 369, 381, 394, 403, 410, 415, 418, 419, 417, 413, 409, 403, 396, 389, 381, 372, 363, 353, 342, 331, 320, 308, 296, 284, 271, 260, 247, 232, 220, 210, 200, 194, 189, 185, 183, 180, 177, 176, 175, 175, 175, 175, 177, 180, 183, 186, 189, 192, 195, 199, 200, 199, 198, 196, 195, 195, 196, 197, 200, 203, 205, 208, 212, 215, 217, 219, 222, 226, 231, 237, 243, 249, 257, 265, 273, 280],
          R06: [79, 81, 89, 113, 151, 203, 265, 339, 410, 464, 492, 508, 517, 524, 531, 538, 544, 551, 556, 556, 554, 549, 541, 531, 519, 504, 488, 469, 450, 431, 414, 395, 377, 358, 341, 325, 309, 293, 279, 265, 253, 241, 234, 227, 225, 222, 221, 220, 220, 220, 220, 220, 223, 227, 233, 239, 244, 251, 258, 263, 268, 273, 278, 281, 283, 286, 291, 296, 302, 313, 325, 338, 351, 364, 376, 389, 401, 413, 425, 436, 447, 458, 469, 477, 485, 493, 500, 506, 512, 517, 521, 525, 529, 532, 535],
          R07: [150, 177, 218, 293, 378, 459, 524, 546, 551, 555, 559, 560, 561, 558, 556, 551, 544, 535, 522, 506, 488, 469, 448, 429, 408, 385, 363, 341, 324, 311, 301, 291, 283, 273, 265, 260, 257, 257, 259, 260, 260, 258, 256, 254, 254, 259, 270, 284, 302, 324, 344, 362, 377, 389, 400, 410, 420, 429, 438, 445, 452, 457, 462, 466, 468, 470, 473, 477, 483, 489, 496, 503, 511, 518, 525, 532, 539, 546, 553, 559, 565, 570, 575, 578, 581, 583, 585, 587, 588, 589, 590, 590, 590, 591, 592],
          R08: [75, 78, 84, 90, 104, 129, 170, 240, 319, 416, 462, 482, 490, 488, 482, 473, 462, 450, 439, 426, 413, 397, 382, 366, 352, 337, 325, 310, 299, 289, 283, 276, 270, 262, 256, 251, 250, 251, 254, 258, 264, 269, 272, 274, 278, 284, 295, 316, 348, 384, 434, 482, 528, 568, 604, 629, 648, 663, 676, 685, 693, 700, 705, 709, 712, 715, 717, 719, 721, 720, 719, 722, 725, 727, 729, 730, 730, 730, 730, 730, 730, 730, 730, 730, 730, 730, 731, 731, 731, 731, 731, 731, 731, 731, 731],
          R09: [69, 72, 73, 70, 66, 62, 58, 55, 52, 52, 51, 50, 50, 49, 48, 47, 46, 44, 42, 41, 38, 35, 33, 31, 30, 29, 28, 28, 28, 29, 30, 30, 31, 31, 32, 32, 33, 34, 35, 37, 41, 44, 48, 52, 60, 76, 102, 136, 190, 256, 336, 418, 505, 581, 641, 682, 717, 740, 758, 770, 781, 790, 797, 803, 809, 814, 819, 824, 828, 830, 831, 833, 835, 836, 836, 837, 838, 839, 839, 839, 839, 839, 839, 839, 839, 839, 839, 839, 839, 839, 838, 837, 837, 836, 836],
          R10: [42, 43, 45, 47, 50, 54, 59, 63, 66, 67, 68, 69, 69, 70, 72, 73, 76, 78, 83, 88, 95, 103, 113, 125, 142, 162, 189, 219, 262, 305, 365, 416, 465, 509, 546, 581, 610, 634, 653, 666, 678, 687, 693, 698, 701, 704, 705, 705, 706, 707, 707, 707, 708, 708, 710, 711, 712, 714, 716, 718, 720, 722, 725, 729, 731, 735, 739, 742, 746, 748, 749, 751, 753, 754, 755, 755, 755, 755, 756, 757, 758, 759, 759, 759, 759, 759, 759, 759, 759, 759, 758, 757, 757, 756, 756],
          R11: [74, 79, 86, 98, 111, 121, 127, 129, 127, 121, 116, 112, 108, 105, 104, 104, 105, 106, 110, 115, 123, 134, 148, 167, 192, 219, 252, 291, 325, 347, 356, 353, 346, 333, 314, 294, 271, 248, 227, 206, 188, 170, 153, 138, 125, 114, 106, 100, 96, 92, 90, 87, 85, 82, 80, 79, 78, 78, 78, 78, 81, 83, 88, 93, 102, 112, 125, 141, 161, 182, 203, 223, 242, 257, 270, 282, 292, 302, 310, 314, 317, 323, 330, 334, 338, 343, 348, 353, 359, 365, 372, 380, 388, 396, 403],
          R12: [189, 175, 158, 139, 120, 103, 90, 82, 76, 68, 64, 65, 75, 93, 123, 160, 207, 256, 300, 331, 346, 347, 341, 328, 307, 282, 257, 230, 204, 178, 154, 129, 109, 90, 75, 62, 51, 41, 35, 29, 25, 22, 19, 17, 17, 17, 16, 16, 16, 16, 16, 16, 16, 16, 18, 18, 18, 18, 19, 20, 23, 24, 26, 30, 35, 43, 56, 74, 97, 128, 166, 210, 257, 305, 354, 401, 446, 485, 520, 551, 577, 599, 618, 633, 645, 656, 666, 674, 680, 686, 691, 694, 697, 700, 702],
          R13: [71, 76, 82, 90, 104, 127, 161, 211, 264, 313, 341, 352, 359, 361, 364, 365, 367, 369, 372, 374, 376, 379, 384, 389, 397, 405, 416, 429, 443, 454, 461, 466, 469, 471, 474, 476, 483, 490, 506, 526, 553, 582, 618, 651, 680, 701, 717, 729, 736, 742, 745, 747, 748, 748, 748, 748, 748, 748, 748, 748, 747, 747, 747, 747, 747, 747, 747, 746, 746, 746, 745, 744, 743, 744, 745, 748, 750, 750, 749, 748, 748, 747, 747, 747, 747, 746, 746, 746, 746, 745, 745, 745, 745, 745, 745],
          R14: [36, 36, 36, 36, 36, 36, 37, 38, 39, 39, 40, 41, 42, 42, 43, 44, 44, 45, 45, 46, 47, 48, 50, 52, 55, 57, 62, 67, 75, 83, 92, 100, 108, 121, 133, 142, 150, 154, 155, 152, 147, 140, 133, 125, 118, 112, 106, 101, 98, 95, 93, 90, 89, 87, 86, 85, 84, 84, 84, 84, 85, 87, 92, 96, 102, 110, 123, 137, 152, 169, 188, 207, 226, 243, 260, 277, 294, 310, 325, 339, 353, 366, 379, 390, 399, 408, 416, 422, 428, 434, 439, 444, 448, 451, 454]
        }
      };
      return results;
    }

    function arrayScalar(array, scalar) {
      var result = [];
      for (var i = 0; i < array.length; i++) {
        result[i] = array[i] * scalar;
      }
      return result;
    }
    function arraySub(array1, array2) {
      var result = [];
      if (array1.length != array2.length) {
        result = NaN;
      } else {
        for (var i = 0; i < array1.length; i++) {
          result[i] = array1[i] - array2[i];
        }
      }
      return result;
    }
    function arrayAdd(array1, array2) {
      var result = [];
      if (array1.length != array2.length) {
        result = NaN;
      } else {
        for (var i = 0; i < array1.length; i++) {
          result[i] = array1[i] + array2[i];
        }
      }
      return result;
    }
    function arrayMul(array1, array2) {
      var result = [];
      for (var i = 0; i < array1.length; i++) {
        result[i] = array1[i] * array2[i];
      }
      return result;
    }

    /*-------------------------------------------------------------GAI-------------------------------------------------------------*/

    /*-------------------------------------------------------------CRI-------------------------------------------------------------*/


    function CRICalculate(spd) {
      // Calculate Correlated Color Temperature, Tc
      var Tc = CCTcalc(spd);

      // Interpolate bar values
      var cie = cie31by1();
      var xbar = interp1(cie.wavelength, cie.xbar, spd.wavelength, 0);
      var ybar = interp1(cie.wavelength, cie.ybar, spd.wavelength, 0);
      var zbar = interp1(cie.wavelength, cie.zbar, spd.wavelength, 0);

      // Calculate Reference Source Spectrum, spdref
      var spdref = [];
      if (Tc < 5000 && Tc > 0) {
        spdref = blackbodySpectra(Tc, spd.wavelength);
      } else {
        if (Tc <= 25000) {
          spdref = cieDaySpectra(Tc, spd.wavelength);
        } else {

        }
      }

      // Load TCS Color Standards
      var TCS = TCSCalc();
      var TCS_1 = new Object;
      for (var iCS in TCS.color_standards) {
        if (TCS.color_standards.hasOwnProperty(iCS)) {
          TCS_1[iCS] = interp1(TCS.wavelength, arrayScalar(TCS.color_standards[iCS], 1 / 1000), spd.wavelength, 0);
        }
      }

      // Calculate u, v chromaticity coordinates of samples
      //test illuminant, uk, vk
      var deltaWavelength = createDelta(spd.wavelength);
      var X = sumproduct(spd.value, arrayMul(deltaWavelength, xbar));
      var Y = sumproduct(spd.value, arrayMul(deltaWavelength, ybar));
      var Z = sumproduct(spd.value, arrayMul(deltaWavelength, zbar));
      var Yknormal = 100 / Y;
      var uk = 4 * X / (X + 15 * Y + 3 * Z);
      var vk = 6 * Y / (X + 15 * Y + 3 * Z);

      //reference illuminant, ur, vr.
      X = sumproduct(spdref, arrayMul(deltaWavelength, xbar));
      Y = sumproduct(spdref, arrayMul(deltaWavelength, ybar));
      Z = sumproduct(spdref, arrayMul(deltaWavelength, zbar));
      var Yrnormal = 100 / Y;
      var ur = 4 * X / (X + 15 * Y + 3 * Z);
      var vr = 6 * Y / (X + 15 * Y + 3 * Z);

      // color standards, uri, vri
      var Yki = new Object;
      var uki = new Object;
      var vki = new Object;
      var Yri = new Object;
      var uri = new Object;
      var vri = new Object;
      for (var iCS in TCS_1) {
        if (TCS_1.hasOwnProperty(iCS)) {
          //test illuminant, uki, vki
          X = sumproduct(arrayMul(spd.value, TCS_1[iCS]), arrayMul(deltaWavelength, xbar));
          Y = sumproduct(arrayMul(spd.value, TCS_1[iCS]), arrayMul(deltaWavelength, ybar));
          Z = sumproduct(arrayMul(spd.value, TCS_1[iCS]), arrayMul(deltaWavelength, zbar));
          Yki[iCS] = Y * Yknormal;
          uki[iCS] = 4 * X / (X + 15 * Y + 3 * Z);
          vki[iCS] = 6 * Y / (X + 15 * Y + 3 * Z);

          //reference illuminant, uri, vri
          X = sumproduct(arrayMul(spdref, TCS_1[iCS]), arrayMul(deltaWavelength, xbar));
          Y = sumproduct(arrayMul(spdref, TCS_1[iCS]), arrayMul(deltaWavelength, ybar));
          Z = sumproduct(arrayMul(spdref, TCS_1[iCS]), arrayMul(deltaWavelength, zbar));
          Yri[iCS] = Y * Yrnormal;
          uri[iCS] = 4 * X / (X + 15 * Y + 3 * Z);
          vri[iCS] = 6 * Y / (X + 15 * Y + 3 * Z);
        }
      }

      // Check tolarance for reference illuminant
      var DC = Math.sqrt(Math.pow(uk - ur, 2) + Math.pow(vk - vr, 2));

      // Apply adaptive (perceived) color shift
      var ck = (4 - uk - 10 * vk) / vk;
      var dk = (1.708 * vk + 0.404 - 1.481 * uk) / vk;
      var cr = (4 - ur - 10 * vr) / vr;
      var dr = (1.708 * vr + 0.404 - 1.481 * ur) / vr;

      var cki;
      var dki;
      var ukip = new Object;
      var vkip = new Object;
      for (var iCS in TCS_1) {
        if (TCS_1.hasOwnProperty(iCS)) {
          cki = (4 - uki[iCS] - 10 * vki[iCS]) / vki[iCS];
          dki = (1.708 * vki[iCS] + 0.404 - 1.481 * uki[iCS]) / vki[iCS];
          ukip[iCS] = (10.872 + 0.404 * cr / ck * cki - 4 * dr / dk * dki) / (16.518 + 1.481 * cr / ck * cki - dr / dk * dki);
          vkip[iCS] = 5.520 / (16.518 + 1.481 * cr / ck * cki - dr / dk * dki);
        }
      }

      // Transformation into 1964 Uniform space coordinates
      var Wstarr = new Object;
      var Ustarr = new Object;
      var Vstarr = new Object;

      var Wstark = new Object;
      var Ustark = new Object;
      var Vstark = new Object;
      for (var iCS in TCS_1) {
        if (TCS_1.hasOwnProperty(iCS)) {
          Wstarr[iCS] = 25 * Math.pow(Yri[iCS], 0.333333) - 17;
          Ustarr[iCS] = 13 * Wstarr[iCS] * (uri[iCS] - ur);
          Vstarr[iCS] = 13 * Wstarr[iCS] * (vri[iCS] - vr);

          Wstark[iCS] = 25 * Math.pow(Yki[iCS], 0.333333) - 17;
          Ustark[iCS] = 13 * Wstark[iCS] * (ukip[iCS] - ur);
          Vstark[iCS] = 13 * Wstark[iCS] * (vkip[iCS] - vr);
        }
      }

      // Determination of resultant color shift, delta E
      var deltaE = new Object;
      var R = new Object;
      for (var iCS in TCS_1) {
        if (TCS_1.hasOwnProperty(iCS)) {
          deltaE[iCS] = Math.sqrt(Math.pow(Ustarr[iCS] - Ustark[iCS], 2) + Math.pow(Vstarr[iCS] - Vstark[iCS], 2) + Math.pow(Wstarr[iCS] - Wstark[iCS], 2));
          R[iCS] = 100 - 4.6 * deltaE[iCS];
        }
      }
      var Ra = [R.R01.toFixed(3), R.R02.toFixed(3), R.R03.toFixed(3), R.R04.toFixed(3), R.R05.toFixed(3), R.R06.toFixed(3), R.R07.toFixed(3), R.R08.toFixed(3)];

      return Ra;
    }
    function CRIAvg(R) {
      var RaAVG = (parseInt(R[0]) + parseInt(R[1]) + parseInt(R[2]) + parseInt(R[3]) + parseInt(R[4]) + parseInt(R[5]) + parseInt(R[6]) + parseInt(R[7])) / 8;
      return RaAVG.toFixed(3);
    }

    function blackbodySpectra(Tc, wave) {
      /* Black Body Spectra
       Calculates the Planktian black body spectrum of given color temperature, Tc.
      % Function arguements are:
      %     Tc - color temperature in Kelvin
      %     wave - column vector specifiying the wavelength values at which the spd is evaluated */

      // 2002 CODATA recommended values
      var h = 6.6260693e-34;
      var c = 299792458;
      var k = 1.3806505e-23;

      var c1 = 2 * Math.PI * h * Math.pow(c, 2);
      var c2 = h * c / k;
      var e9 = 1e-9;

      var calc1 = arrayScalar(arrayBase(arrayScalar(wave, e9), -5), c1);
      var calc2 = arrayAdd2(arrayPow(Math.exp(1), arrayScalar(arrayInverse(arrayScalar(arrayScalar(wave, e9), Tc)), c2)), - 1);

      var spdBlackBody = arrayDiv(calc1, calc2);

      return spdBlackBody;
    }

    function cieDaySpectra(Tc, wave) {
      if (Tc <= 25000) {
        var cieDaySn = {
          wavelength: [300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500, 510, 520, 530, 540, 550, 560, 570, 580, 590, 600, 610, 620, 630, 640, 650, 660, 670, 680, 690, 700, 710, 720, 730, 740, 750, 760, 770, 780, 790, 800, 810, 820, 830],
          S0: [0.04, 6, 29.6, 55.3, 57.3, 61.8, 61.5, 68.8, 63.4, 65.8, 94.8, 104.8, 105.9, 96.8, 113.9, 125.6, 125.5, 121.3, 121.3, 113.5, 113.1, 110.8, 106.5, 108.8, 105.3, 104.4, 100, 96, 95.1, 89.1, 90.5, 90.3, 88.4, 84, 85.1, 81.9, 82.6, 84.9, 81.3, 71.9, 74.3, 76.4, 63.3, 71.7, 77, 65.2, 47.7, 68.6, 65, 66, 61, 53.3, 58.9, 61.9],
          S1: [0.02, 4.5, 22.4, 42, 40.6, 41.6, 38, 42.4, 38.5, 35, 43.4, 46.3, 43.9, 37.1, 36.7, 35.9, 32.6, 27.9, 24.3, 20.1, 16.2, 13.2, 8.6, 6.1, 4.2, 1.9, 0, -1.6, -3.5, -3.5, -5.8, -7.2, -8.6, -9.5, -10.9, -10.7, -12, -14, -13.6, -12, -13.3, -12.9, -10.6, -11.6, -12.2, -10.2, -7.8, -11.2, -10.4, -10.6, -9.7, -8.3, -9.3, -9.8],
          S2: [0, 2, 4, 8.5, 7.8, 6.7, 5.3, 6.1, 3, 1.2, -1.1, -0.5, -0.7, -1.2, -2.6, -2.9, -2.8, -2.6, -2.6, -1.8, -1.5, -1.3, -1.2, -1, -0.5, -0.3, 0, 0.2, 0.5, 2.1, 3.2, 4.1, 4.7, 5.1, 6.7, 7.3, 8.6, 9.8, 10.2, 8.3, 9.6, 8.5, 7, 7.6, 8, 6.7, 5.2, 7.4, 6.8, 7, 6.4, 5.5, 6.1, 6.5]
        };
        var xd;
        if (Tc <= 7000) {
          xd = -4.6070e9 / Math.pow(Tc, 3) + 2.9678e6 / Math.pow(Tc, 2) + 0.09911e3 / Tc + 0.244063;
        } else {
          xd = -2.0064e9 / Math.pow(Tc, 3) + 1.9018e6 / Math.pow(Tc, 2) + 0.24748e3 / Tc + 0.237040;
        }

        var yd = -3.000 * xd * xd + 2.870 * xd - 0.275;
        var M1 = (-1.3515 - 1.7703 * xd + 5.9114 * yd) / (0.0241 + 0.2562 * xd - 0.7341 * yd);
        var M2 = (0.0300 - 31.4424 * xd + 30.0717 * yd) / (0.0241 + 0.2562 * xd - 0.7341 * yd);
        var spdDay = arrayAdd(cieDaySn.S0, arrayAdd(arrayScalar(cieDaySn.S1, M1), arrayScalar(cieDaySn.S2, M2)));

        var v = pchip(cieDaySn.wavelength, spdDay, wave);
        for (var i = 0; i < v.length; i++) {
          if (isNaN(v[i])) {
            v[i] = 0;
          }
        }
      } else {
        v = NaN;
      }
      return v;
    }
    function arrayBase(array, value) {
      var result = [];
      for (var i = 0; i < array.length; i++) {
        result[i] = Math.pow(array[i], value);
      }
      return result;
    }

    function arrayAdd2(array1, value) {
      var result = [];
      if (Array.isArray(value)) {
        if (array1.length != value.length) {
          result = NaN;
        } else {
          for (var i = 0; i < array1.length; i++) {
            result[i] = array1[i] + value[i];
          }
        }
      } else {
        for (var i = 0; i < array1.length; i++) {
          result[i] = array1[i] + value;
        }
      }
      return result;
    }

    function arrayPow(base, array) {
      var result = [];
      for (var i = 0; i < array.length; i++) {
        var exponent = array[i] * 1.0;
        result[i] = Math.pow(base, exponent);
      }
      return result;
    }
    function arrayInverse(array) {
      var result = [];
      for (var i = 0; i < array.length; i++) {
        result[i] = 1 / array[i];
      }
      return result;
    }
    function arrayDiv(array1, array2) {
      var result = [];
      for (var i = 0; i < array1.length; i++) {
        result[i] = array1[i] / array2[i];
      }
      return result;
    }
    /*-------------------------------------------------------------CRI-------------------------------------------------------------*/
    /*-------------------------------------------------------------FSI-------------------------------------------------------------*/


    function SPDArray380To730(oldJson) {
      var newArray = [];
      for (var i = 380; i <= 730; i++) {
        newArray.push(oldJson[i]);
      }
      return newArray;
    }

    function FSICalculate(spdO) {
      spd2Norm = SPDArray380To730(spdO);
      spd = normalize(spd2Norm);
      EEcum = [];
      for (var i = 1; i <= 351; i++) {
        EEcum.push(0.00285 * i);
      }
      var sumSqrDiff = [];
      var shiftingSPD = spd;

      for (var j = 0; j < 351; j++) {
        var cumSum = [];
        shiftingSPD.reduce(function (a, b, i) { return cumSum[i] = a + b; }, 0);
        var subtracted = arraySub(cumSum, EEcum);
        var sumOfSquares = 0;
        for (var g = 0; g < 351; g++) {
          sumOfSquares += Math.pow(subtracted[g], 2)
        }
        sumSqrDiff.push(sumOfSquares);
        shiftingSPD = circshift(shiftingSPD, 1);
      }

      const arrAvg = arr => arr.reduce((a, b) => a + b, 0) / arr.length
      FSI = arrAvg(sumSqrDiff);
      return FSI.toFixed(2);
    }
    function FSCICalculate(FSI) {
      FSCI = 100 - 5.1 * FSI;
      return FSCI.toFixed(2);
    }
    function circshift(nums, k) {
      if (nums.length > k) {
        nums.unshift(...nums.splice(-k));
      }
      else {
        let i = 0;
        while (i < k) {
          nums.unshift(nums.splice(-1));
          i++;
        }
      }
      return nums;
    }

    function normalize(arr) {
      normalizer = 1 / arrSum(arr);
      normalizedArray = [];
      for (var i = 0; i < arr.length; i++) {
        normalizedArray.push(arr[i] * normalizer);
      }
      return normalizedArray;
    }

    function SPDArray380To730Even(oldJson) {
      var newArray = [];
      var cN;
      for (var i = 380; i <= 730; i += 2) {
        cN = (oldJson[i] + oldJson[i + 1]) / 2;
        newArray.push(cN);
      }
      return newArray;
    }

    /*-------------------------------------------------------------FSI-------------------------------------------------------------*/

    /*-------------------------------------------------------------Calculations-------------------------------------------------------------*/

    //CHANGEME
    //var spdOrig2 = { "273": 0.000000000, "274": 0.000000000, "275": 0.000000000, "276": 0.000000000, "277": 0.000000000, "278": 0.000000000, "279": 0.000000000, "280": 0.000000000, "281": 0.000000000, "282": 0.000000000, "283": 0.000000000, "284": 0.000000000, "285": 0.000000000, "286": 0.000000000, "287": 0.000000000, "288": 0.000000000, "289": 0.000000000, "290": 0.000000000, "291": 0.000000000, "292": 0.000000000, "293": 0.000000000, "294": 0.000000000, "295": 0.000000000, "296": 0.000000000, "297": 0.000000000, "298": 0.000000000, "299": 0.000000000, "300": 0.000059822, "301": 0.000095902, "302": 0.000076911, "303": 0.000132080, "304": 0.000170410, "305": 0.000056454, "306": 0.000071459, "307": 0.000122120, "308": 0.000182780, "309": 0.000159850, "310": 0.000076606, "311": 0.000178390, "312": 0.000151580, "313": 0.000000000, "314": 0.000020131, "315": 0.000068431, "316": 0.000022811, "317": 0.000074463, "318": 0.000134320, "319": 0.000172230, "320": 0.000249510, "321": 0.000192020, "322": 0.000118730, "323": 0.000112730, "324": 0.000132400, "325": 0.000196000, "326": 0.000110080, "327": 0.000001317, "328": 0.000073830, "329": 0.000147870, "330": 0.000198580, "331": 0.000271630, "332": 0.000289790, "333": 0.000225100, "334": 0.000150080, "335": 0.000190200, "336": 0.000253850, "337": 0.000130350, "338": 0.000195310, "339": 0.000278850, "340": 0.000379100, "341": 0.000335650, "342": 0.000096625, "343": 0.000117850, "344": 0.000127260, "345": 0.000110910, "346": 0.000211610, "347": 0.000293070, "348": 0.000280270, "349": 0.000252760, "350": 0.000266210, "351": 0.000121860, "352": 0.000099282, "353": 0.000182130, "354": 0.000245910, "355": 0.000211070, "356": 0.000157280, "357": 0.000147420, "358": 0.000230490, "359": 0.000296870, "360": 0.000270330, "361": 0.000255510, "362": 0.000141910, "363": 0.000236240, "364": 0.000374400, "365": 0.000261050, "366": 0.000207650, "367": 0.000177830, "368": 0.000196180, "369": 0.000309550, "370": 0.000384860, "371": 0.000470370, "372": 0.000418790, "373": 0.000312970, "374": 0.000274840, "375": 0.000250660, "376": 0.000262990, "377": 0.000264410, "378": 0.000307560, "379": 0.000242390, "380": 0.000183520, "381": 0.000222950, "382": 0.000197410, "383": 0.000151130, "384": 0.000215620, "385": 0.000308470, "386": 0.000295020, "387": 0.000292070, "388": 0.000251550, "389": 0.000261290, "390": 0.000295460, "391": 0.000374860, "392": 0.000399480, "393": 0.000437550, "394": 0.000386780, "395": 0.000314110, "396": 0.000434830, "397": 0.000455390, "398": 0.000419910, "399": 0.000464520, "400": 0.000539540, "401": 0.000546380, "402": 0.000574140, "403": 0.000490310, "404": 0.000493290, "405": 0.000609370, "406": 0.000692110, "407": 0.000714800, "408": 0.000808730, "409": 0.000854190, "410": 0.000884120, "411": 0.001160400, "412": 0.001371600, "413": 0.001508800, "414": 0.001649400, "415": 0.001856700, "416": 0.002133500, "417": 0.002474400, "418": 0.002877600, "419": 0.003352800, "420": 0.003808200, "421": 0.004251300, "422": 0.004877700, "423": 0.005772900, "424": 0.006637900, "425": 0.007489300, "426": 0.008515500, "427": 0.009576300, "428": 0.010823000, "429": 0.012090000, "430": 0.013698000, "431": 0.015330000, "432": 0.016906000, "433": 0.018788000, "434": 0.020645000, "435": 0.022534000, "436": 0.024558000, "437": 0.026909000, "438": 0.029327000, "439": 0.031573000, "440": 0.034374000, "441": 0.037489000, "442": 0.040521000, "443": 0.043785000, "444": 0.047299000, "445": 0.050957000, "446": 0.054602000, "447": 0.058112000, "448": 0.061027000, "449": 0.063317000, "450": 0.065394000, "451": 0.066649000, "452": 0.066768000, "453": 0.066099000, "454": 0.064165000, "455": 0.062044000, "456": 0.059395000, "457": 0.056215000, "458": 0.052725000, "459": 0.048993000, "460": 0.045609000, "461": 0.042764000, "462": 0.040021000, "463": 0.037468000, "464": 0.035265000, "465": 0.033144000, "466": 0.031597000, "467": 0.030047000, "468": 0.028608000, "469": 0.027333000, "470": 0.026156000, "471": 0.025060000, "472": 0.023945000, "473": 0.022954000, "474": 0.021845000, "475": 0.020782000, "476": 0.019972000, "477": 0.019121000, "478": 0.018315000, "479": 0.017739000, "480": 0.017276000, "481": 0.016715000, "482": 0.016252000, "483": 0.016033000, "484": 0.015816000, "485": 0.015660000, "486": 0.015477000, "487": 0.015393000, "488": 0.015386000, "489": 0.015421000, "490": 0.015565000, "491": 0.015723000, "492": 0.015967000, "493": 0.016318000, "494": 0.016701000, "495": 0.017264000, "496": 0.017772000, "497": 0.018284000, "498": 0.019029000, "499": 0.019741000, "500": 0.020500000, "501": 0.021368000, "502": 0.022414000, "503": 0.023389000, "504": 0.024372000, "505": 0.025490000, "506": 0.026712000, "507": 0.027881000, "508": 0.029080000, "509": 0.030296000, "510": 0.031531000, "511": 0.032656000, "512": 0.033910000, "513": 0.035276000, "514": 0.036583000, "515": 0.037725000, "516": 0.039096000, "517": 0.040533000, "518": 0.041786000, "519": 0.043060000, "520": 0.044111000, "521": 0.045185000, "522": 0.046338000, "523": 0.047467000, "524": 0.048662000, "525": 0.049750000, "526": 0.050783000, "527": 0.051819000, "528": 0.052748000, "529": 0.053795000, "530": 0.054815000, "531": 0.055669000, "532": 0.056523000, "533": 0.057473000, "534": 0.058184000, "535": 0.059137000, "536": 0.059753000, "537": 0.060382000, "538": 0.061162000, "539": 0.061933000, "540": 0.062625000, "541": 0.063376000, "542": 0.064163000, "543": 0.064781000, "544": 0.065274000, "545": 0.065774000, "546": 0.066278000, "547": 0.066896000, "548": 0.067462000, "549": 0.068110000, "550": 0.068632000, "551": 0.069047000, "552": 0.069491000, "553": 0.070078000, "554": 0.070632000, "555": 0.071291000, "556": 0.071550000, "557": 0.071897000, "558": 0.072475000, "559": 0.073040000, "560": 0.073439000, "561": 0.073901000, "562": 0.074086000, "563": 0.074540000, "564": 0.074833000, "565": 0.075109000, "566": 0.075357000, "567": 0.075795000, "568": 0.076202000, "569": 0.076303000, "570": 0.076401000, "571": 0.076555000, "572": 0.076747000, "573": 0.076962000, "574": 0.077199000, "575": 0.077416000, "576": 0.077745000, "577": 0.077827000, "578": 0.078108000, "579": 0.078278000, "580": 0.078311000, "581": 0.078228000, "582": 0.078154000, "583": 0.078270000, "584": 0.078504000, "585": 0.078448000, "586": 0.078317000, "587": 0.078179000, "588": 0.078067000, "589": 0.078028000, "590": 0.077946000, "591": 0.077817000, "592": 0.077531000, "593": 0.077267000, "594": 0.077173000, "595": 0.077122000, "596": 0.076788000, "597": 0.076486000, "598": 0.076069000, "599": 0.075732000, "600": 0.075460000, "601": 0.075036000, "602": 0.074427000, "603": 0.073971000, "604": 0.073569000, "605": 0.073003000, "606": 0.072568000, "607": 0.071941000, "608": 0.071328000, "609": 0.070831000, "610": 0.070169000, "611": 0.069759000, "612": 0.069084000, "613": 0.068340000, "614": 0.067792000, "615": 0.067263000, "616": 0.066156000, "617": 0.065446000, "618": 0.065002000, "619": 0.064118000, "620": 0.063235000, "621": 0.062437000, "622": 0.061754000, "623": 0.060753000, "624": 0.060046000, "625": 0.059197000, "626": 0.058663000, "627": 0.057887000, "628": 0.056984000, "629": 0.056097000, "630": 0.055292000, "631": 0.054474000, "632": 0.053537000, "633": 0.052416000, "634": 0.051773000, "635": 0.051199000, "636": 0.050166000, "637": 0.049261000, "638": 0.048428000, "639": 0.047719000, "640": 0.046856000, "641": 0.045890000, "642": 0.045133000, "643": 0.044301000, "644": 0.043446000, "645": 0.042701000, "646": 0.042092000, "647": 0.040976000, "648": 0.040174000, "649": 0.039381000, "650": 0.038388000, "651": 0.037764000, "652": 0.037124000, "653": 0.036380000, "654": 0.035487000, "655": 0.034724000, "656": 0.034051000, "657": 0.033158000, "658": 0.032376000, "659": 0.031754000, "660": 0.031188000, "661": 0.030358000, "662": 0.029486000, "663": 0.028832000, "664": 0.028344000, "665": 0.027503000, "666": 0.026765000, "667": 0.026107000, "668": 0.025348000, "669": 0.024929000, "670": 0.024506000, "671": 0.023815000, "672": 0.022974000, "673": 0.022404000, "674": 0.021825000, "675": 0.021208000, "676": 0.021052000, "677": 0.020413000, "678": 0.019858000, "679": 0.019628000, "680": 0.019175000, "681": 0.018438000, "682": 0.017971000, "683": 0.017459000, "684": 0.016899000, "685": 0.016519000, "686": 0.016191000, "687": 0.015812000, "688": 0.015391000, "689": 0.014845000, "690": 0.014479000, "691": 0.014062000, "692": 0.013629000, "693": 0.013432000, "694": 0.013230000, "695": 0.012835000, "696": 0.012391000, "697": 0.012015000, "698": 0.011662000, "699": 0.011429000, "700": 0.011112000, "701": 0.010738000, "702": 0.010537000, "703": 0.010239000, "704": 0.010016000, "705": 0.009785000, "706": 0.009434300, "707": 0.009178100, "708": 0.008952100, "709": 0.008859300, "710": 0.008474500, "711": 0.008154500, "712": 0.007960900, "713": 0.007777700, "714": 0.007394400, "715": 0.007214100, "716": 0.007079000, "717": 0.007044100, "718": 0.006902300, "719": 0.006700500, "720": 0.006435100, "721": 0.006178500, "722": 0.006012700, "723": 0.005833000, "724": 0.005719600, "725": 0.005479500, "726": 0.005401000, "727": 0.005273500, "728": 0.004999300, "729": 0.005013800, "730": 0.004931100, "731": 0.004680500, "732": 0.004560100, "733": 0.004363900, "734": 0.004156100, "735": 0.004290100, "736": 0.004088900, "737": 0.003901200, "738": 0.003865800, "739": 0.003669400, "740": 0.003573600, "741": 0.003545500, "742": 0.003557100, "743": 0.003450700, "744": 0.003261200, "745": 0.003135800, "746": 0.003231000, "747": 0.003011500, "748": 0.002992100, "749": 0.002884600, "750": 0.002864200, "751": 0.002782600, "752": 0.002661400, "753": 0.002567800, "754": 0.002627900, "755": 0.002353600, "756": 0.002300500, "757": 0.002195200, "758": 0.002241000, "759": 0.002521400, "760": 0.002556600, "761": 0.002252000, "762": 0.002026800, "763": 0.002070100, "764": 0.001957400, "765": 0.001825100, "766": 0.001743100, "767": 0.001748000, "768": 0.001706700, "769": 0.001715400, "770": 0.001533100, "771": 0.001357200, "772": 0.001600700, "773": 0.001749900, "774": 0.001459500, "775": 0.001159400, "776": 0.001431700, "777": 0.001584800, "778": 0.001280000, "779": 0.001163800, "780": 0.001446500, "781": 0.001176700, "782": 0.001430500, "783": 0.001190200, "784": 0.001073600, "785": 0.001139800, "786": 0.001271500, "787": 0.001319300, "788": 0.001142500, "789": 0.000901640, "790": 0.000836160, "791": 0.000965730, "792": 0.000939320, "793": 0.001156300, "794": 0.001279600, "795": 0.000972430, "796": 0.000827920, "797": 0.001087400, "798": 0.001083800, "799": 0.000539780, "800": 0.000902010, "801": 0.001014000, "802": 0.000885040, "803": 0.000721760, "804": 0.000303650, "805": 0.000395120, "806": 0.000914230, "807": 0.000701710, "808": 0.000841070, "809": 0.000622060, "810": 0.000446050, "811": 0.000611000, "812": 0.000247860, "813": 0.000390050, "814": 0.000727860, "815": 0.000580380, "816": 0.000336370, "817": 0.000427370, "818": 0.000595330, "819": 0.000629870, "820": 0.000873440, "821": 0.001175300, "822": 0.000473990, "823": 0.000110970, "824": 0.000176210, "825": 0.000484380, "826": 0.000604790, "827": 0.000918140, "828": 0.000960580, "829": 0.000426960, "830": 0.000306480, "831": 0.000685180, "832": 0.000263070, "833": 0.000462190, "834": 0.000016759, "835": 0.000513990, "836": 0.000479320, "837": 0.000843820, "838": 0.000584190, "839": 0.000072575, "840": 0.000246340, "841": 0.000257440, "842": 0.000658030, "843": 0.001043200, "844": 0.000756670, "845": 0.000466670, "846": 0.000000000, "847": 0.000166750, "848": 0.000920980, "849": 0.000716490, "850": 0.000260450, "851": 0.000538930, "852": 0.000353990 };
    temp1 = this.state.spectralDataState.replace(/\\/g, '')
    var spdOrig = JSON.parse(temp1)

    var spdOrigEvens = SPDArray380To730Even(spdOrig);
    var spd = {
      wavelength: [380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 610, 612, 614, 616, 618, 620, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 686, 688, 690, 692, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 730],
      value: spdOrigEvens
    };
    var criSPD = {
      spd: {
        wavelength: [380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 610, 612, 614, 616, 618, 620, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 686, 688, 690, 692, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 730],
        value: spdOrigEvens
      },
    };


    var CIE3Arr = CIEXYZ(spd);
    X = CIE3Arr[0];
    Y = CIE3Arr[1];
    Z = CIE3Arr[2];
    xy = CIEXY(CIE3Arr);
    CCT = CCTcalc(spd);
    GAI = gamutAreaCalculate(spd);
    FSI = FSICalculate(spdOrig);
    FSCI = FSCICalculate(FSI);
    CRIArr = CRICalculate(criSPD.spd) //R1-R8
    CRI = CRIAvg(CRIArr);




    /*-------------------------------------------------------------Calculations-------------------------------------------------------------*/



    fetch('http://localhost:4000/metrics', {
      method: 'POST',
      body: JSON.stringify({
        SpectraSearchID: this.state.SpectraSearchID,
        lumens: this.state.lumens,
        watts: this.state.watts,
        volts: this.state.volts,
        cc_X: X,
        cc_Y: Y,
        cc_Z: Z,
        CIEXY: xy,
        CCT: CCT,
        FSI: FSI,
        FSCI: FSCI,
        GAI: GAI,
        CRI_R1: CRIArr[0],
        CRI_R2: CRIArr[1],
        CRI_R3: CRIArr[2],
        CRI_R4: CRIArr[3],
        CRI_R5: CRIArr[4],
        CRI_R6: CRIArr[5],
        CRI_R7: CRIArr[6],
        CRI_R8: CRIArr[7],
        CRI: CRI

      }),
      headers: { 'Content-Type': 'application/json' }
    })
      .then(function (response) {
        //this is the line that is giving me the error
        return response.json()
      }).then(function (body) {
        console.log(body);
      });

  }


  render() {
    const { activeIndex } = this.state
    return (
      <div>
        <br />
        {this.state.hidden ? <Form id="noFormError" error>
          <Message
            error
            header='Login to Upload'
            content='Users must have an account and be logged in to upload to Spectra Search Database.'
          />

        </Form> : ''}
        {this.state.errorOnSubmit ? <Form error>

          <Message
            error
            header='Missing required input'
            content='Sorry, you can only submit with all required info. Please check inputs and try again.'
          />

        </Form> : ''}
        {this.state.formSubmitted ? <div> <Form success>
          <Message
            success
            header='Upload Completed'
            content="Thanks for your contribution."
          />
          {/* <Button onClick={window.location.reload()}>Upload additional instruments</Button> */}
        </Form> </div>
          :
          <Segment id="middle-upload">
            <Form id="uploadFormHidden">
              <div>Note* Please be sure to Login or upload cannot be processed</div>
              <div>User uploading: {localStorage.getItem('thatUser')}</div>
              {this.props.user ? <div>{this.props.user}</div> : null}
              <Header id="upload-header-id">Upload Form</Header>
              <div class="formElementDecor">

                <Form.Input required
                  label="Instrument name:"
                  type="text"
                  onChange={_ = (event) => { this.setState({ Name: event.target.value }) }}
                  onClick={this.handle_id_assignment}
                />
                <Form.Input
                  label="Manufacturer:"
                  type="text"
                  onChange={_ = (event) => { this.setState({ manufacturer: event.target.value }); }}
                />
                <Form.Input
                  label="Description">
                  <TextArea
                    placeholder="Describe instrument"
                    maxLength="255"
                    onChange={_ = (event) => { this.setState({ description: event.target.value }); }}
                  />
                </Form.Input>

                <Form.Input required
                  label="Application (ex. Decorative)" /*change ( ex.A-Type ) to (ex. Decorative ) 10/7/2020*/
                >
                  <Dropdown
                    placeholder='Select application'
                    fluid
                    selection
                    options={applicationTypeOptions}
                    onChange={_ = (event, value) => { this.setState({ application: event.target.textContent }); }}
                  />
                </Form.Input>

                <Form.Input required
                  label="Type"
                >
                  <Dropdown
                    placeholder='Select type'
                    fluid
                    selection
                    options={typeOptions}
                    onChange={_ = (event, value) => { this.setState({ type: event.target.textContent }); }}
                  />
                </Form.Input>

                <Form.Input required
                  label="Technology:"
                >
                  <Dropdown
                    placeholder='Select technology'
                    fluid
                    selection
                    options={technologyOptions}
                    onChange={_ = (event, value) => { this.setState({ technology: event.target.textContent }); }}
                  />
                </Form.Input>

                <Form.Input
                  required
                  label="Spectral Data (Only wavelength data between 360 to 830 are acsepted anything beside this the app will crash)"
                >
                  <TextArea
                    placeholder="Enter as comma delimited list inside curly brackets"
                    maxLength="10000000"
                    onChange={_ = (event) => { this.setState({ spectralDataState: event.target.value }); }}
                  />
                  <span><Popup content='Data values for Spectral Distribution Graph. Enter wavelength: norm power, e.i. {\"400\": 0.000000000001, \"401\": 0.000000000001, \"402\": 0.000000000001}' trigger={<Button icon='info' size="mini" circular={true} compact={true} color="blue" />} /></span>
                </Form.Input>

                <Form.Input required // 10/1/2020 add required
                  label="Lumens (lumens):"
                  type="text"
                  onChange={_ = (event) => { this.setState({ lumens: Number(event.target.value) }); }}
                />

                <Form.Input required // 10/1/2020 add required
                  label="Watts (W):"
                  type="text"
                  onChange={_ = (event) => { this.setState({ watts: Number(event.target.value) }); }}
                />

                <Form.Input required // 10/1/2020 add required
                  label="Volts (V):"
                  type="text"
                  onChange={_ = (event) => { this.setState({ volts: Number(event.target.value) }); }}
                />

              </div>
            </Form>
            <br />
            <Button onClick={this.handle_submit}>Upload</Button>
            <br />
          </Segment>}
      </div>
    );
  }
}